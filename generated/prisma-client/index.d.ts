// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  plan: (where?: PlanWhereInput) => Promise<boolean>;
  questionnaire: (where?: QuestionnaireWhereInput) => Promise<boolean>;
  shippingAddress: (where?: ShippingAddressWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  plan: (where: PlanWhereUniqueInput) => PlanNullablePromise;
  plans: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Plan>;
  plansConnection: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlanConnectionPromise;
  questionnaire: (
    where: QuestionnaireWhereUniqueInput
  ) => QuestionnaireNullablePromise;
  questionnaires: (args?: {
    where?: QuestionnaireWhereInput;
    orderBy?: QuestionnaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Questionnaire>;
  questionnairesConnection: (args?: {
    where?: QuestionnaireWhereInput;
    orderBy?: QuestionnaireOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionnaireConnectionPromise;
  shippingAddress: (
    where: ShippingAddressWhereUniqueInput
  ) => ShippingAddressNullablePromise;
  shippingAddresses: (args?: {
    where?: ShippingAddressWhereInput;
    orderBy?: ShippingAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ShippingAddress>;
  shippingAddressesConnection: (args?: {
    where?: ShippingAddressWhereInput;
    orderBy?: ShippingAddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShippingAddressConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlan: (data: PlanCreateInput) => PlanPromise;
  updatePlan: (args: {
    data: PlanUpdateInput;
    where: PlanWhereUniqueInput;
  }) => PlanPromise;
  updateManyPlans: (args: {
    data: PlanUpdateManyMutationInput;
    where?: PlanWhereInput;
  }) => BatchPayloadPromise;
  upsertPlan: (args: {
    where: PlanWhereUniqueInput;
    create: PlanCreateInput;
    update: PlanUpdateInput;
  }) => PlanPromise;
  deletePlan: (where: PlanWhereUniqueInput) => PlanPromise;
  deleteManyPlans: (where?: PlanWhereInput) => BatchPayloadPromise;
  createQuestionnaire: (data: QuestionnaireCreateInput) => QuestionnairePromise;
  updateQuestionnaire: (args: {
    data: QuestionnaireUpdateInput;
    where: QuestionnaireWhereUniqueInput;
  }) => QuestionnairePromise;
  updateManyQuestionnaires: (args: {
    data: QuestionnaireUpdateManyMutationInput;
    where?: QuestionnaireWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestionnaire: (args: {
    where: QuestionnaireWhereUniqueInput;
    create: QuestionnaireCreateInput;
    update: QuestionnaireUpdateInput;
  }) => QuestionnairePromise;
  deleteQuestionnaire: (
    where: QuestionnaireWhereUniqueInput
  ) => QuestionnairePromise;
  deleteManyQuestionnaires: (
    where?: QuestionnaireWhereInput
  ) => BatchPayloadPromise;
  createShippingAddress: (
    data: ShippingAddressCreateInput
  ) => ShippingAddressPromise;
  updateShippingAddress: (args: {
    data: ShippingAddressUpdateInput;
    where: ShippingAddressWhereUniqueInput;
  }) => ShippingAddressPromise;
  upsertShippingAddress: (args: {
    where: ShippingAddressWhereUniqueInput;
    create: ShippingAddressCreateInput;
    update: ShippingAddressUpdateInput;
  }) => ShippingAddressPromise;
  deleteShippingAddress: (
    where: ShippingAddressWhereUniqueInput
  ) => ShippingAddressPromise;
  deleteManyShippingAddresses: (
    where?: ShippingAddressWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  plan: (
    where?: PlanSubscriptionWhereInput
  ) => PlanSubscriptionPayloadSubscription;
  questionnaire: (
    where?: QuestionnaireSubscriptionWhereInput
  ) => QuestionnaireSubscriptionPayloadSubscription;
  shippingAddress: (
    where?: ShippingAddressSubscriptionWhereInput
  ) => ShippingAddressSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "PATIENT" | "PHYSICIAN" | "VISITOR";

export type PlanType = "ED" | "HAIR" | "SLEEP";

export type PlanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "expireDate_ASC"
  | "expireDate_DESC"
  | "nextDelivery_ASC"
  | "nextDelivery_DESC"
  | "refillsRemaining_ASC"
  | "refillsRemaining_DESC"
  | "totalRefills_ASC"
  | "totalRefills_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "ccToken_ASC"
  | "ccToken_DESC";

export type QuestionnaireOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "details_ASC"
  | "details_DESC";

export type ShippingAddressOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "count_ASC"
  | "count_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlanWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlanWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  nextDelivery_not?: Maybe<DateTimeInput>;
  nextDelivery_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_lt?: Maybe<DateTimeInput>;
  nextDelivery_lte?: Maybe<DateTimeInput>;
  nextDelivery_gt?: Maybe<DateTimeInput>;
  nextDelivery_gte?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  refillsRemaining_not?: Maybe<Int>;
  refillsRemaining_in?: Maybe<Int[] | Int>;
  refillsRemaining_not_in?: Maybe<Int[] | Int>;
  refillsRemaining_lt?: Maybe<Int>;
  refillsRemaining_lte?: Maybe<Int>;
  refillsRemaining_gt?: Maybe<Int>;
  refillsRemaining_gte?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  totalRefills_not?: Maybe<Int>;
  totalRefills_in?: Maybe<Int[] | Int>;
  totalRefills_not_in?: Maybe<Int[] | Int>;
  totalRefills_lt?: Maybe<Int>;
  totalRefills_lte?: Maybe<Int>;
  totalRefills_gt?: Maybe<Int>;
  totalRefills_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  ccToken?: Maybe<String>;
  ccToken_not?: Maybe<String>;
  ccToken_in?: Maybe<String[] | String>;
  ccToken_not_in?: Maybe<String[] | String>;
  ccToken_lt?: Maybe<String>;
  ccToken_lte?: Maybe<String>;
  ccToken_gt?: Maybe<String>;
  ccToken_gte?: Maybe<String>;
  ccToken_contains?: Maybe<String>;
  ccToken_not_contains?: Maybe<String>;
  ccToken_starts_with?: Maybe<String>;
  ccToken_not_starts_with?: Maybe<String>;
  ccToken_ends_with?: Maybe<String>;
  ccToken_not_ends_with?: Maybe<String>;
  shippingAddress?: Maybe<ShippingAddressWhereInput>;
  AND?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  OR?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  NOT?: Maybe<PlanWhereInput[] | PlanWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  plans_every?: Maybe<PlanWhereInput>;
  plans_some?: Maybe<PlanWhereInput>;
  plans_none?: Maybe<PlanWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ShippingAddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ShippingAddressWhereInput[] | ShippingAddressWhereInput>;
  OR?: Maybe<ShippingAddressWhereInput[] | ShippingAddressWhereInput>;
  NOT?: Maybe<ShippingAddressWhereInput[] | ShippingAddressWhereInput>;
}

export type QuestionnaireWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuestionnaireWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<QuestionnaireWhereInput[] | QuestionnaireWhereInput>;
  OR?: Maybe<QuestionnaireWhereInput[] | QuestionnaireWhereInput>;
  NOT?: Maybe<QuestionnaireWhereInput[] | QuestionnaireWhereInput>;
}

export type ShippingAddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PlanCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPlansInput;
  type: PlanType;
  startDate: DateTimeInput;
  expireDate: DateTimeInput;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining: Int;
  totalRefills: Int;
  ccToken: String;
  shippingAddress: ShippingAddressCreateOneInput;
}

export interface UserCreateOneWithoutPlansInput {
  create?: Maybe<UserCreateWithoutPlansInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPlansInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
}

export interface ShippingAddressCreateOneInput {
  create?: Maybe<ShippingAddressCreateInput>;
  connect?: Maybe<ShippingAddressWhereUniqueInput>;
}

export interface ShippingAddressCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
  plans?: Maybe<PlanCreateManyWithoutUserInput>;
}

export interface PlanCreateManyWithoutUserInput {
  create?: Maybe<PlanCreateWithoutUserInput[] | PlanCreateWithoutUserInput>;
  connect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
}

export interface PlanCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  type: PlanType;
  startDate: DateTimeInput;
  expireDate: DateTimeInput;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining: Int;
  totalRefills: Int;
  ccToken: String;
  shippingAddress: ShippingAddressCreateOneInput;
}

export interface PlanUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPlansInput>;
  type?: Maybe<PlanType>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  ccToken?: Maybe<String>;
  shippingAddress?: Maybe<ShippingAddressUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredWithoutPlansInput {
  create?: Maybe<UserCreateWithoutPlansInput>;
  update?: Maybe<UserUpdateWithoutPlansDataInput>;
  upsert?: Maybe<UserUpsertWithoutPlansInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPlansDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
}

export interface UserUpsertWithoutPlansInput {
  update: UserUpdateWithoutPlansDataInput;
  create: UserCreateWithoutPlansInput;
}

export interface ShippingAddressUpdateOneRequiredInput {
  create?: Maybe<ShippingAddressCreateInput>;
  update?: Maybe<ShippingAddressUpdateDataInput>;
  upsert?: Maybe<ShippingAddressUpsertNestedInput>;
  connect?: Maybe<ShippingAddressWhereUniqueInput>;
}

export interface ShippingAddressUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
}

export interface PlanUpdateManyWithoutUserInput {
  create?: Maybe<PlanCreateWithoutUserInput[] | PlanCreateWithoutUserInput>;
  delete?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  connect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  set?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  disconnect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  update?: Maybe<
    | PlanUpdateWithWhereUniqueWithoutUserInput[]
    | PlanUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PlanUpsertWithWhereUniqueWithoutUserInput[]
    | PlanUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  updateMany?: Maybe<
    PlanUpdateManyWithWhereNestedInput[] | PlanUpdateManyWithWhereNestedInput
  >;
}

export interface PlanUpdateWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput;
  data: PlanUpdateWithoutUserDataInput;
}

export interface PlanUpdateWithoutUserDataInput {
  type?: Maybe<PlanType>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  ccToken?: Maybe<String>;
  shippingAddress?: Maybe<ShippingAddressUpdateOneRequiredInput>;
}

export interface PlanUpsertWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput;
  update: PlanUpdateWithoutUserDataInput;
  create: PlanCreateWithoutUserInput;
}

export interface PlanScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  nextDelivery_not?: Maybe<DateTimeInput>;
  nextDelivery_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_lt?: Maybe<DateTimeInput>;
  nextDelivery_lte?: Maybe<DateTimeInput>;
  nextDelivery_gt?: Maybe<DateTimeInput>;
  nextDelivery_gte?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  refillsRemaining_not?: Maybe<Int>;
  refillsRemaining_in?: Maybe<Int[] | Int>;
  refillsRemaining_not_in?: Maybe<Int[] | Int>;
  refillsRemaining_lt?: Maybe<Int>;
  refillsRemaining_lte?: Maybe<Int>;
  refillsRemaining_gt?: Maybe<Int>;
  refillsRemaining_gte?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  totalRefills_not?: Maybe<Int>;
  totalRefills_in?: Maybe<Int[] | Int>;
  totalRefills_not_in?: Maybe<Int[] | Int>;
  totalRefills_lt?: Maybe<Int>;
  totalRefills_lte?: Maybe<Int>;
  totalRefills_gt?: Maybe<Int>;
  totalRefills_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  ccToken?: Maybe<String>;
  ccToken_not?: Maybe<String>;
  ccToken_in?: Maybe<String[] | String>;
  ccToken_not_in?: Maybe<String[] | String>;
  ccToken_lt?: Maybe<String>;
  ccToken_lte?: Maybe<String>;
  ccToken_gt?: Maybe<String>;
  ccToken_gte?: Maybe<String>;
  ccToken_contains?: Maybe<String>;
  ccToken_not_contains?: Maybe<String>;
  ccToken_starts_with?: Maybe<String>;
  ccToken_not_starts_with?: Maybe<String>;
  ccToken_ends_with?: Maybe<String>;
  ccToken_not_ends_with?: Maybe<String>;
  AND?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  OR?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  NOT?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
}

export interface PlanUpdateManyWithWhereNestedInput {
  where: PlanScalarWhereInput;
  data: PlanUpdateManyDataInput;
}

export interface PlanUpdateManyDataInput {
  type?: Maybe<PlanType>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  ccToken?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ShippingAddressUpsertNestedInput {
  update: ShippingAddressUpdateDataInput;
  create: ShippingAddressCreateInput;
}

export interface PlanUpdateManyMutationInput {
  type?: Maybe<PlanType>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  nextDelivery?: Maybe<DateTimeInput>;
  refillsRemaining?: Maybe<Int>;
  totalRefills?: Maybe<Int>;
  ccToken?: Maybe<String>;
}

export interface QuestionnaireCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  details: Json;
}

export interface QuestionnaireUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  details?: Maybe<Json>;
}

export interface QuestionnaireUpdateManyMutationInput {
  details?: Maybe<Json>;
}

export interface ShippingAddressUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  role?: Maybe<Role>;
  count?: Maybe<Int>;
}

export interface PlanSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlanWhereInput>;
  AND?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  OR?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  NOT?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
}

export interface QuestionnaireSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionnaireWhereInput>;
  AND?: Maybe<
    QuestionnaireSubscriptionWhereInput[] | QuestionnaireSubscriptionWhereInput
  >;
  OR?: Maybe<
    QuestionnaireSubscriptionWhereInput[] | QuestionnaireSubscriptionWhereInput
  >;
  NOT?: Maybe<
    QuestionnaireSubscriptionWhereInput[] | QuestionnaireSubscriptionWhereInput
  >;
}

export interface ShippingAddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShippingAddressWhereInput>;
  AND?: Maybe<
    | ShippingAddressSubscriptionWhereInput[]
    | ShippingAddressSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ShippingAddressSubscriptionWhereInput[]
    | ShippingAddressSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ShippingAddressSubscriptionWhereInput[]
    | ShippingAddressSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Plan {
  id: ID_Output;
  type: PlanType;
  startDate: DateTimeOutput;
  expireDate: DateTimeOutput;
  nextDelivery?: DateTimeOutput;
  refillsRemaining: Int;
  totalRefills: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  ccToken: String;
}

export interface PlanPromise extends Promise<Plan>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<PlanType>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  nextDelivery: () => Promise<DateTimeOutput>;
  refillsRemaining: () => Promise<Int>;
  totalRefills: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  ccToken: () => Promise<String>;
  shippingAddress: <T = ShippingAddressPromise>() => T;
}

export interface PlanSubscription
  extends Promise<AsyncIterator<Plan>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<PlanType>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  nextDelivery: () => Promise<AsyncIterator<DateTimeOutput>>;
  refillsRemaining: () => Promise<AsyncIterator<Int>>;
  totalRefills: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ccToken: () => Promise<AsyncIterator<String>>;
  shippingAddress: <T = ShippingAddressSubscription>() => T;
}

export interface PlanNullablePromise
  extends Promise<Plan | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  type: () => Promise<PlanType>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  nextDelivery: () => Promise<DateTimeOutput>;
  refillsRemaining: () => Promise<Int>;
  totalRefills: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  ccToken: () => Promise<String>;
  shippingAddress: <T = ShippingAddressPromise>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  role?: Role;
  count?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  count: () => Promise<Int>;
  plans: <T = FragmentableArray<Plan>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  count: () => Promise<AsyncIterator<Int>>;
  plans: <T = Promise<AsyncIterator<PlanSubscription>>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  count: () => Promise<Int>;
  plans: <T = FragmentableArray<Plan>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ShippingAddress {
  id: ID_Output;
}

export interface ShippingAddressPromise
  extends Promise<ShippingAddress>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
}

export interface ShippingAddressSubscription
  extends Promise<AsyncIterator<ShippingAddress>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
}

export interface ShippingAddressNullablePromise
  extends Promise<ShippingAddress | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
}

export interface PlanConnection {
  pageInfo: PageInfo;
  edges: PlanEdge[];
}

export interface PlanConnectionPromise
  extends Promise<PlanConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlanEdge>>() => T;
  aggregate: <T = AggregatePlanPromise>() => T;
}

export interface PlanConnectionSubscription
  extends Promise<AsyncIterator<PlanConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlanEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlanSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlanEdge {
  node: Plan;
  cursor: String;
}

export interface PlanEdgePromise extends Promise<PlanEdge>, Fragmentable {
  node: <T = PlanPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlanEdgeSubscription
  extends Promise<AsyncIterator<PlanEdge>>,
    Fragmentable {
  node: <T = PlanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlan {
  count: Int;
}

export interface AggregatePlanPromise
  extends Promise<AggregatePlan>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlanSubscription
  extends Promise<AsyncIterator<AggregatePlan>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Questionnaire {
  id: ID_Output;
  details: Json;
}

export interface QuestionnairePromise
  extends Promise<Questionnaire>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  details: () => Promise<Json>;
}

export interface QuestionnaireSubscription
  extends Promise<AsyncIterator<Questionnaire>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  details: () => Promise<AsyncIterator<Json>>;
}

export interface QuestionnaireNullablePromise
  extends Promise<Questionnaire | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  details: () => Promise<Json>;
}

export interface QuestionnaireConnection {
  pageInfo: PageInfo;
  edges: QuestionnaireEdge[];
}

export interface QuestionnaireConnectionPromise
  extends Promise<QuestionnaireConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionnaireEdge>>() => T;
  aggregate: <T = AggregateQuestionnairePromise>() => T;
}

export interface QuestionnaireConnectionSubscription
  extends Promise<AsyncIterator<QuestionnaireConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionnaireEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionnaireSubscription>() => T;
}

export interface QuestionnaireEdge {
  node: Questionnaire;
  cursor: String;
}

export interface QuestionnaireEdgePromise
  extends Promise<QuestionnaireEdge>,
    Fragmentable {
  node: <T = QuestionnairePromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionnaireEdgeSubscription
  extends Promise<AsyncIterator<QuestionnaireEdge>>,
    Fragmentable {
  node: <T = QuestionnaireSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuestionnaire {
  count: Int;
}

export interface AggregateQuestionnairePromise
  extends Promise<AggregateQuestionnaire>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionnaireSubscription
  extends Promise<AsyncIterator<AggregateQuestionnaire>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShippingAddressConnection {
  pageInfo: PageInfo;
  edges: ShippingAddressEdge[];
}

export interface ShippingAddressConnectionPromise
  extends Promise<ShippingAddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShippingAddressEdge>>() => T;
  aggregate: <T = AggregateShippingAddressPromise>() => T;
}

export interface ShippingAddressConnectionSubscription
  extends Promise<AsyncIterator<ShippingAddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShippingAddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShippingAddressSubscription>() => T;
}

export interface ShippingAddressEdge {
  node: ShippingAddress;
  cursor: String;
}

export interface ShippingAddressEdgePromise
  extends Promise<ShippingAddressEdge>,
    Fragmentable {
  node: <T = ShippingAddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShippingAddressEdgeSubscription
  extends Promise<AsyncIterator<ShippingAddressEdge>>,
    Fragmentable {
  node: <T = ShippingAddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShippingAddress {
  count: Int;
}

export interface AggregateShippingAddressPromise
  extends Promise<AggregateShippingAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShippingAddressSubscription
  extends Promise<AsyncIterator<AggregateShippingAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlanSubscriptionPayload {
  mutation: MutationType;
  node: Plan;
  updatedFields: String[];
  previousValues: PlanPreviousValues;
}

export interface PlanSubscriptionPayloadPromise
  extends Promise<PlanSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlanPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlanPreviousValuesPromise>() => T;
}

export interface PlanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlanSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlanPreviousValuesSubscription>() => T;
}

export interface PlanPreviousValues {
  id: ID_Output;
  type: PlanType;
  startDate: DateTimeOutput;
  expireDate: DateTimeOutput;
  nextDelivery?: DateTimeOutput;
  refillsRemaining: Int;
  totalRefills: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  ccToken: String;
}

export interface PlanPreviousValuesPromise
  extends Promise<PlanPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<PlanType>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  nextDelivery: () => Promise<DateTimeOutput>;
  refillsRemaining: () => Promise<Int>;
  totalRefills: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  ccToken: () => Promise<String>;
}

export interface PlanPreviousValuesSubscription
  extends Promise<AsyncIterator<PlanPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<PlanType>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  nextDelivery: () => Promise<AsyncIterator<DateTimeOutput>>;
  refillsRemaining: () => Promise<AsyncIterator<Int>>;
  totalRefills: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ccToken: () => Promise<AsyncIterator<String>>;
}

export interface QuestionnaireSubscriptionPayload {
  mutation: MutationType;
  node: Questionnaire;
  updatedFields: String[];
  previousValues: QuestionnairePreviousValues;
}

export interface QuestionnaireSubscriptionPayloadPromise
  extends Promise<QuestionnaireSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionnairePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionnairePreviousValuesPromise>() => T;
}

export interface QuestionnaireSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionnaireSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionnaireSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionnairePreviousValuesSubscription>() => T;
}

export interface QuestionnairePreviousValues {
  id: ID_Output;
  details: Json;
}

export interface QuestionnairePreviousValuesPromise
  extends Promise<QuestionnairePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  details: () => Promise<Json>;
}

export interface QuestionnairePreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionnairePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  details: () => Promise<AsyncIterator<Json>>;
}

export interface ShippingAddressSubscriptionPayload {
  mutation: MutationType;
  node: ShippingAddress;
  updatedFields: String[];
  previousValues: ShippingAddressPreviousValues;
}

export interface ShippingAddressSubscriptionPayloadPromise
  extends Promise<ShippingAddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShippingAddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShippingAddressPreviousValuesPromise>() => T;
}

export interface ShippingAddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShippingAddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShippingAddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShippingAddressPreviousValuesSubscription>() => T;
}

export interface ShippingAddressPreviousValues {
  id: ID_Output;
}

export interface ShippingAddressPreviousValuesPromise
  extends Promise<ShippingAddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ShippingAddressPreviousValuesSubscription
  extends Promise<AsyncIterator<ShippingAddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  role?: Role;
  count?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  count: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "PlanType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Plan",
    embedded: false
  },
  {
    name: "ShippingAddress",
    embedded: false
  },
  {
    name: "Questionnaire",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
