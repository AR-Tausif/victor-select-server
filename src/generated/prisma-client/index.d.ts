// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  creditCard: (where?: CreditCardWhereInput) => Promise<boolean>;
  plan: (where?: PlanWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  visit: (where?: VisitWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  creditCard: (where: CreditCardWhereUniqueInput) => CreditCardNullablePromise;
  creditCards: (args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CreditCard>;
  creditCardsConnection: (args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CreditCardConnectionPromise;
  plan: (where: PlanWhereUniqueInput) => PlanNullablePromise;
  plans: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Plan>;
  plansConnection: (args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlanConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  visit: (where: VisitWhereUniqueInput) => VisitNullablePromise;
  visits: (args?: {
    where?: VisitWhereInput;
    orderBy?: VisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Visit>;
  visitsConnection: (args?: {
    where?: VisitWhereInput;
    orderBy?: VisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VisitConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createCreditCard: (data: CreditCardCreateInput) => CreditCardPromise;
  updateCreditCard: (args: {
    data: CreditCardUpdateInput;
    where: CreditCardWhereUniqueInput;
  }) => CreditCardPromise;
  updateManyCreditCards: (args: {
    data: CreditCardUpdateManyMutationInput;
    where?: CreditCardWhereInput;
  }) => BatchPayloadPromise;
  upsertCreditCard: (args: {
    where: CreditCardWhereUniqueInput;
    create: CreditCardCreateInput;
    update: CreditCardUpdateInput;
  }) => CreditCardPromise;
  deleteCreditCard: (where: CreditCardWhereUniqueInput) => CreditCardPromise;
  deleteManyCreditCards: (where?: CreditCardWhereInput) => BatchPayloadPromise;
  createPlan: (data: PlanCreateInput) => PlanPromise;
  updatePlan: (args: {
    data: PlanUpdateInput;
    where: PlanWhereUniqueInput;
  }) => PlanPromise;
  updateManyPlans: (args: {
    data: PlanUpdateManyMutationInput;
    where?: PlanWhereInput;
  }) => BatchPayloadPromise;
  upsertPlan: (args: {
    where: PlanWhereUniqueInput;
    create: PlanCreateInput;
    update: PlanUpdateInput;
  }) => PlanPromise;
  deletePlan: (where: PlanWhereUniqueInput) => PlanPromise;
  deleteManyPlans: (where?: PlanWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVisit: (data: VisitCreateInput) => VisitPromise;
  updateVisit: (args: {
    data: VisitUpdateInput;
    where: VisitWhereUniqueInput;
  }) => VisitPromise;
  updateManyVisits: (args: {
    data: VisitUpdateManyMutationInput;
    where?: VisitWhereInput;
  }) => BatchPayloadPromise;
  upsertVisit: (args: {
    where: VisitWhereUniqueInput;
    create: VisitCreateInput;
    update: VisitUpdateInput;
  }) => VisitPromise;
  deleteVisit: (where: VisitWhereUniqueInput) => VisitPromise;
  deleteManyVisits: (where?: VisitWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  creditCard: (
    where?: CreditCardSubscriptionWhereInput
  ) => CreditCardSubscriptionPayloadSubscription;
  plan: (
    where?: PlanSubscriptionWhereInput
  ) => PlanSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  visit: (
    where?: VisitSubscriptionWhereInput
  ) => VisitSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "PATIENT" | "PHYSICIAN" | "VISITOR";

export type PlanStatus =
  | "PENDING"
  | "ACTIVE"
  | "ONDEMAND"
  | "CLOSED"
  | "DENIED";

export type PlanType = "ED" | "HAIR" | "SLEEP" | "JOY" | "ALLERGY" | "WEIGHT";

export type VisitStatus = "PENDING" | "APPROVED" | "DENIED" | "TEMPORARY";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "active_ASC"
  | "active_DESC"
  | "addressOne_ASC"
  | "addressOne_DESC"
  | "addressTwo_ASC"
  | "addressTwo_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC"
  | "telephone_ASC"
  | "telephone_DESC";

export type CreditCardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "active_ASC"
  | "active_DESC"
  | "ccToken_ASC"
  | "ccToken_DESC"
  | "ccType_ASC"
  | "ccType_DESC"
  | "ccNumber_ASC"
  | "ccNumber_DESC"
  | "ccExpire_ASC"
  | "ccExpire_DESC";

export type PlanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "drugName_ASC"
  | "drugName_DESC"
  | "strength_ASC"
  | "strength_DESC"
  | "timesPerMonth_ASC"
  | "timesPerMonth_DESC"
  | "addonName_ASC"
  | "addonName_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "expireDate_ASC"
  | "expireDate_DESC"
  | "totalRefills_ASC"
  | "totalRefills_DESC"
  | "refillsRemaining_ASC"
  | "refillsRemaining_DESC"
  | "nextDelivery_ASC"
  | "nextDelivery_DESC"
  | "shippingInterval_ASC"
  | "shippingInterval_DESC"
  | "amountDue_ASC"
  | "amountDue_DESC";

export type VisitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "questionnaire_ASC"
  | "questionnaire_DESC"
  | "status_ASC"
  | "status_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "photoId_ASC"
  | "photoId_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "count_ASC"
  | "count_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressOne_not?: Maybe<String>;
  addressOne_in?: Maybe<String[] | String>;
  addressOne_not_in?: Maybe<String[] | String>;
  addressOne_lt?: Maybe<String>;
  addressOne_lte?: Maybe<String>;
  addressOne_gt?: Maybe<String>;
  addressOne_gte?: Maybe<String>;
  addressOne_contains?: Maybe<String>;
  addressOne_not_contains?: Maybe<String>;
  addressOne_starts_with?: Maybe<String>;
  addressOne_not_starts_with?: Maybe<String>;
  addressOne_ends_with?: Maybe<String>;
  addressOne_not_ends_with?: Maybe<String>;
  addressTwo?: Maybe<String>;
  addressTwo_not?: Maybe<String>;
  addressTwo_in?: Maybe<String[] | String>;
  addressTwo_not_in?: Maybe<String[] | String>;
  addressTwo_lt?: Maybe<String>;
  addressTwo_lte?: Maybe<String>;
  addressTwo_gt?: Maybe<String>;
  addressTwo_gte?: Maybe<String>;
  addressTwo_contains?: Maybe<String>;
  addressTwo_not_contains?: Maybe<String>;
  addressTwo_starts_with?: Maybe<String>;
  addressTwo_not_starts_with?: Maybe<String>;
  addressTwo_ends_with?: Maybe<String>;
  addressTwo_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<String>;
  zipcode_not?: Maybe<String>;
  zipcode_in?: Maybe<String[] | String>;
  zipcode_not_in?: Maybe<String[] | String>;
  zipcode_lt?: Maybe<String>;
  zipcode_lte?: Maybe<String>;
  zipcode_gt?: Maybe<String>;
  zipcode_gte?: Maybe<String>;
  zipcode_contains?: Maybe<String>;
  zipcode_not_contains?: Maybe<String>;
  zipcode_starts_with?: Maybe<String>;
  zipcode_not_starts_with?: Maybe<String>;
  zipcode_ends_with?: Maybe<String>;
  zipcode_not_ends_with?: Maybe<String>;
  telephone?: Maybe<String>;
  telephone_not?: Maybe<String>;
  telephone_in?: Maybe<String[] | String>;
  telephone_not_in?: Maybe<String[] | String>;
  telephone_lt?: Maybe<String>;
  telephone_lte?: Maybe<String>;
  telephone_gt?: Maybe<String>;
  telephone_gte?: Maybe<String>;
  telephone_contains?: Maybe<String>;
  telephone_not_contains?: Maybe<String>;
  telephone_starts_with?: Maybe<String>;
  telephone_not_starts_with?: Maybe<String>;
  telephone_ends_with?: Maybe<String>;
  telephone_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  addresses_every?: Maybe<AddressWhereInput>;
  addresses_some?: Maybe<AddressWhereInput>;
  addresses_none?: Maybe<AddressWhereInput>;
  creditCards_every?: Maybe<CreditCardWhereInput>;
  creditCards_some?: Maybe<CreditCardWhereInput>;
  creditCards_none?: Maybe<CreditCardWhereInput>;
  photoId?: Maybe<String>;
  photoId_not?: Maybe<String>;
  photoId_in?: Maybe<String[] | String>;
  photoId_not_in?: Maybe<String[] | String>;
  photoId_lt?: Maybe<String>;
  photoId_lte?: Maybe<String>;
  photoId_gt?: Maybe<String>;
  photoId_gte?: Maybe<String>;
  photoId_contains?: Maybe<String>;
  photoId_not_contains?: Maybe<String>;
  photoId_starts_with?: Maybe<String>;
  photoId_not_starts_with?: Maybe<String>;
  photoId_ends_with?: Maybe<String>;
  photoId_not_ends_with?: Maybe<String>;
  plans_every?: Maybe<PlanWhereInput>;
  plans_some?: Maybe<PlanWhereInput>;
  plans_none?: Maybe<PlanWhereInput>;
  visits_every?: Maybe<VisitWhereInput>;
  visits_some?: Maybe<VisitWhereInput>;
  visits_none?: Maybe<VisitWhereInput>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  count?: Maybe<Int>;
  count_not?: Maybe<Int>;
  count_in?: Maybe<Int[] | Int>;
  count_not_in?: Maybe<Int[] | Int>;
  count_lt?: Maybe<Int>;
  count_lte?: Maybe<Int>;
  count_gt?: Maybe<Int>;
  count_gte?: Maybe<Int>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CreditCardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  user?: Maybe<UserWhereInput>;
  ccToken?: Maybe<String>;
  ccToken_not?: Maybe<String>;
  ccToken_in?: Maybe<String[] | String>;
  ccToken_not_in?: Maybe<String[] | String>;
  ccToken_lt?: Maybe<String>;
  ccToken_lte?: Maybe<String>;
  ccToken_gt?: Maybe<String>;
  ccToken_gte?: Maybe<String>;
  ccToken_contains?: Maybe<String>;
  ccToken_not_contains?: Maybe<String>;
  ccToken_starts_with?: Maybe<String>;
  ccToken_not_starts_with?: Maybe<String>;
  ccToken_ends_with?: Maybe<String>;
  ccToken_not_ends_with?: Maybe<String>;
  ccType?: Maybe<String>;
  ccType_not?: Maybe<String>;
  ccType_in?: Maybe<String[] | String>;
  ccType_not_in?: Maybe<String[] | String>;
  ccType_lt?: Maybe<String>;
  ccType_lte?: Maybe<String>;
  ccType_gt?: Maybe<String>;
  ccType_gte?: Maybe<String>;
  ccType_contains?: Maybe<String>;
  ccType_not_contains?: Maybe<String>;
  ccType_starts_with?: Maybe<String>;
  ccType_not_starts_with?: Maybe<String>;
  ccType_ends_with?: Maybe<String>;
  ccType_not_ends_with?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccNumber_not?: Maybe<String>;
  ccNumber_in?: Maybe<String[] | String>;
  ccNumber_not_in?: Maybe<String[] | String>;
  ccNumber_lt?: Maybe<String>;
  ccNumber_lte?: Maybe<String>;
  ccNumber_gt?: Maybe<String>;
  ccNumber_gte?: Maybe<String>;
  ccNumber_contains?: Maybe<String>;
  ccNumber_not_contains?: Maybe<String>;
  ccNumber_starts_with?: Maybe<String>;
  ccNumber_not_starts_with?: Maybe<String>;
  ccNumber_ends_with?: Maybe<String>;
  ccNumber_not_ends_with?: Maybe<String>;
  ccExpire?: Maybe<String>;
  ccExpire_not?: Maybe<String>;
  ccExpire_in?: Maybe<String[] | String>;
  ccExpire_not_in?: Maybe<String[] | String>;
  ccExpire_lt?: Maybe<String>;
  ccExpire_lte?: Maybe<String>;
  ccExpire_gt?: Maybe<String>;
  ccExpire_gte?: Maybe<String>;
  ccExpire_contains?: Maybe<String>;
  ccExpire_not_contains?: Maybe<String>;
  ccExpire_starts_with?: Maybe<String>;
  ccExpire_not_starts_with?: Maybe<String>;
  ccExpire_ends_with?: Maybe<String>;
  ccExpire_not_ends_with?: Maybe<String>;
  AND?: Maybe<CreditCardWhereInput[] | CreditCardWhereInput>;
  OR?: Maybe<CreditCardWhereInput[] | CreditCardWhereInput>;
  NOT?: Maybe<CreditCardWhereInput[] | CreditCardWhereInput>;
}

export interface PlanWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<PlanStatus>;
  status_not?: Maybe<PlanStatus>;
  status_in?: Maybe<PlanStatus[] | PlanStatus>;
  status_not_in?: Maybe<PlanStatus[] | PlanStatus>;
  user?: Maybe<UserWhereInput>;
  visit?: Maybe<VisitWhereInput>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  drugName?: Maybe<String>;
  drugName_not?: Maybe<String>;
  drugName_in?: Maybe<String[] | String>;
  drugName_not_in?: Maybe<String[] | String>;
  drugName_lt?: Maybe<String>;
  drugName_lte?: Maybe<String>;
  drugName_gt?: Maybe<String>;
  drugName_gte?: Maybe<String>;
  drugName_contains?: Maybe<String>;
  drugName_not_contains?: Maybe<String>;
  drugName_starts_with?: Maybe<String>;
  drugName_not_starts_with?: Maybe<String>;
  drugName_ends_with?: Maybe<String>;
  drugName_not_ends_with?: Maybe<String>;
  strength?: Maybe<String>;
  strength_not?: Maybe<String>;
  strength_in?: Maybe<String[] | String>;
  strength_not_in?: Maybe<String[] | String>;
  strength_lt?: Maybe<String>;
  strength_lte?: Maybe<String>;
  strength_gt?: Maybe<String>;
  strength_gte?: Maybe<String>;
  strength_contains?: Maybe<String>;
  strength_not_contains?: Maybe<String>;
  strength_starts_with?: Maybe<String>;
  strength_not_starts_with?: Maybe<String>;
  strength_ends_with?: Maybe<String>;
  strength_not_ends_with?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  timesPerMonth_not?: Maybe<Int>;
  timesPerMonth_in?: Maybe<Int[] | Int>;
  timesPerMonth_not_in?: Maybe<Int[] | Int>;
  timesPerMonth_lt?: Maybe<Int>;
  timesPerMonth_lte?: Maybe<Int>;
  timesPerMonth_gt?: Maybe<Int>;
  timesPerMonth_gte?: Maybe<Int>;
  addonName?: Maybe<String>;
  addonName_not?: Maybe<String>;
  addonName_in?: Maybe<String[] | String>;
  addonName_not_in?: Maybe<String[] | String>;
  addonName_lt?: Maybe<String>;
  addonName_lte?: Maybe<String>;
  addonName_gt?: Maybe<String>;
  addonName_gte?: Maybe<String>;
  addonName_contains?: Maybe<String>;
  addonName_not_contains?: Maybe<String>;
  addonName_starts_with?: Maybe<String>;
  addonName_not_starts_with?: Maybe<String>;
  addonName_ends_with?: Maybe<String>;
  addonName_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  totalRefills_not?: Maybe<Int>;
  totalRefills_in?: Maybe<Int[] | Int>;
  totalRefills_not_in?: Maybe<Int[] | Int>;
  totalRefills_lt?: Maybe<Int>;
  totalRefills_lte?: Maybe<Int>;
  totalRefills_gt?: Maybe<Int>;
  totalRefills_gte?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  refillsRemaining_not?: Maybe<Int>;
  refillsRemaining_in?: Maybe<Int[] | Int>;
  refillsRemaining_not_in?: Maybe<Int[] | Int>;
  refillsRemaining_lt?: Maybe<Int>;
  refillsRemaining_lte?: Maybe<Int>;
  refillsRemaining_gt?: Maybe<Int>;
  refillsRemaining_gte?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  nextDelivery_not?: Maybe<DateTimeInput>;
  nextDelivery_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_lt?: Maybe<DateTimeInput>;
  nextDelivery_lte?: Maybe<DateTimeInput>;
  nextDelivery_gt?: Maybe<DateTimeInput>;
  nextDelivery_gte?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  shippingInterval_not?: Maybe<Int>;
  shippingInterval_in?: Maybe<Int[] | Int>;
  shippingInterval_not_in?: Maybe<Int[] | Int>;
  shippingInterval_lt?: Maybe<Int>;
  shippingInterval_lte?: Maybe<Int>;
  shippingInterval_gt?: Maybe<Int>;
  shippingInterval_gte?: Maybe<Int>;
  amountDue?: Maybe<Int>;
  amountDue_not?: Maybe<Int>;
  amountDue_in?: Maybe<Int[] | Int>;
  amountDue_not_in?: Maybe<Int[] | Int>;
  amountDue_lt?: Maybe<Int>;
  amountDue_lte?: Maybe<Int>;
  amountDue_gt?: Maybe<Int>;
  amountDue_gte?: Maybe<Int>;
  AND?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  OR?: Maybe<PlanWhereInput[] | PlanWhereInput>;
  NOT?: Maybe<PlanWhereInput[] | PlanWhereInput>;
}

export interface VisitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  status?: Maybe<VisitStatus>;
  status_not?: Maybe<VisitStatus>;
  status_in?: Maybe<VisitStatus[] | VisitStatus>;
  status_not_in?: Maybe<VisitStatus[] | VisitStatus>;
  AND?: Maybe<VisitWhereInput[] | VisitWhereInput>;
  OR?: Maybe<VisitWhereInput[] | VisitWhereInput>;
  NOT?: Maybe<VisitWhereInput[] | VisitWhereInput>;
}

export type CreditCardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PlanWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VisitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutAddressesInput;
  active?: Maybe<Boolean>;
  addressOne: String;
  addressTwo?: Maybe<String>;
  city: String;
  state: String;
  zipcode: String;
  telephone: String;
}

export interface UserCreateOneWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  creditCards?: Maybe<CreditCardCreateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanCreateManyWithoutUserInput>;
  visits?: Maybe<VisitCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface CreditCardCreateManyWithoutUserInput {
  create?: Maybe<
    CreditCardCreateWithoutUserInput[] | CreditCardCreateWithoutUserInput
  >;
  connect?: Maybe<CreditCardWhereUniqueInput[] | CreditCardWhereUniqueInput>;
}

export interface CreditCardCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  ccToken: String;
  ccType: String;
  ccNumber: String;
  ccExpire: String;
}

export interface PlanCreateManyWithoutUserInput {
  create?: Maybe<PlanCreateWithoutUserInput[] | PlanCreateWithoutUserInput>;
  connect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
}

export interface PlanCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  status?: Maybe<PlanStatus>;
  visit: VisitCreateOneInput;
  type: PlanType;
  drugName: String;
  strength?: Maybe<String>;
  timesPerMonth: Int;
  addonName?: Maybe<String>;
  startDate: DateTimeInput;
  expireDate: DateTimeInput;
  totalRefills: Int;
  refillsRemaining: Int;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval: Int;
  amountDue: Int;
}

export interface VisitCreateOneInput {
  create?: Maybe<VisitCreateInput>;
  connect?: Maybe<VisitWhereUniqueInput>;
}

export interface VisitCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutVisitsInput>;
  type?: Maybe<PlanType>;
  questionnaire: Json;
  status?: Maybe<VisitStatus>;
}

export interface UserCreateOneWithoutVisitsInput {
  create?: Maybe<UserCreateWithoutVisitsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutVisitsInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardCreateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface AddressCreateManyWithoutUserInput {
  create?: Maybe<
    AddressCreateWithoutUserInput[] | AddressCreateWithoutUserInput
  >;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  addressOne: String;
  addressTwo?: Maybe<String>;
  city: String;
  state: String;
  zipcode: String;
  telephone: String;
}

export interface VisitCreateManyWithoutUserInput {
  create?: Maybe<VisitCreateWithoutUserInput[] | VisitCreateWithoutUserInput>;
  connect?: Maybe<VisitWhereUniqueInput[] | VisitWhereUniqueInput>;
}

export interface VisitCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  type?: Maybe<PlanType>;
  questionnaire: Json;
  status?: Maybe<VisitStatus>;
}

export interface AddressUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutAddressesInput>;
  active?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressTwo?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipcode?: Maybe<String>;
  telephone?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  update?: Maybe<UserUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAddressesDataInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  creditCards?: Maybe<CreditCardUpdateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
  visits?: Maybe<VisitUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface CreditCardUpdateManyWithoutUserInput {
  create?: Maybe<
    CreditCardCreateWithoutUserInput[] | CreditCardCreateWithoutUserInput
  >;
  delete?: Maybe<CreditCardWhereUniqueInput[] | CreditCardWhereUniqueInput>;
  connect?: Maybe<CreditCardWhereUniqueInput[] | CreditCardWhereUniqueInput>;
  set?: Maybe<CreditCardWhereUniqueInput[] | CreditCardWhereUniqueInput>;
  disconnect?: Maybe<CreditCardWhereUniqueInput[] | CreditCardWhereUniqueInput>;
  update?: Maybe<
    | CreditCardUpdateWithWhereUniqueWithoutUserInput[]
    | CreditCardUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CreditCardUpsertWithWhereUniqueWithoutUserInput[]
    | CreditCardUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CreditCardScalarWhereInput[] | CreditCardScalarWhereInput>;
  updateMany?: Maybe<
    | CreditCardUpdateManyWithWhereNestedInput[]
    | CreditCardUpdateManyWithWhereNestedInput
  >;
}

export interface CreditCardUpdateWithWhereUniqueWithoutUserInput {
  where: CreditCardWhereUniqueInput;
  data: CreditCardUpdateWithoutUserDataInput;
}

export interface CreditCardUpdateWithoutUserDataInput {
  active?: Maybe<Boolean>;
  ccToken?: Maybe<String>;
  ccType?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccExpire?: Maybe<String>;
}

export interface CreditCardUpsertWithWhereUniqueWithoutUserInput {
  where: CreditCardWhereUniqueInput;
  update: CreditCardUpdateWithoutUserDataInput;
  create: CreditCardCreateWithoutUserInput;
}

export interface CreditCardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  ccToken?: Maybe<String>;
  ccToken_not?: Maybe<String>;
  ccToken_in?: Maybe<String[] | String>;
  ccToken_not_in?: Maybe<String[] | String>;
  ccToken_lt?: Maybe<String>;
  ccToken_lte?: Maybe<String>;
  ccToken_gt?: Maybe<String>;
  ccToken_gte?: Maybe<String>;
  ccToken_contains?: Maybe<String>;
  ccToken_not_contains?: Maybe<String>;
  ccToken_starts_with?: Maybe<String>;
  ccToken_not_starts_with?: Maybe<String>;
  ccToken_ends_with?: Maybe<String>;
  ccToken_not_ends_with?: Maybe<String>;
  ccType?: Maybe<String>;
  ccType_not?: Maybe<String>;
  ccType_in?: Maybe<String[] | String>;
  ccType_not_in?: Maybe<String[] | String>;
  ccType_lt?: Maybe<String>;
  ccType_lte?: Maybe<String>;
  ccType_gt?: Maybe<String>;
  ccType_gte?: Maybe<String>;
  ccType_contains?: Maybe<String>;
  ccType_not_contains?: Maybe<String>;
  ccType_starts_with?: Maybe<String>;
  ccType_not_starts_with?: Maybe<String>;
  ccType_ends_with?: Maybe<String>;
  ccType_not_ends_with?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccNumber_not?: Maybe<String>;
  ccNumber_in?: Maybe<String[] | String>;
  ccNumber_not_in?: Maybe<String[] | String>;
  ccNumber_lt?: Maybe<String>;
  ccNumber_lte?: Maybe<String>;
  ccNumber_gt?: Maybe<String>;
  ccNumber_gte?: Maybe<String>;
  ccNumber_contains?: Maybe<String>;
  ccNumber_not_contains?: Maybe<String>;
  ccNumber_starts_with?: Maybe<String>;
  ccNumber_not_starts_with?: Maybe<String>;
  ccNumber_ends_with?: Maybe<String>;
  ccNumber_not_ends_with?: Maybe<String>;
  ccExpire?: Maybe<String>;
  ccExpire_not?: Maybe<String>;
  ccExpire_in?: Maybe<String[] | String>;
  ccExpire_not_in?: Maybe<String[] | String>;
  ccExpire_lt?: Maybe<String>;
  ccExpire_lte?: Maybe<String>;
  ccExpire_gt?: Maybe<String>;
  ccExpire_gte?: Maybe<String>;
  ccExpire_contains?: Maybe<String>;
  ccExpire_not_contains?: Maybe<String>;
  ccExpire_starts_with?: Maybe<String>;
  ccExpire_not_starts_with?: Maybe<String>;
  ccExpire_ends_with?: Maybe<String>;
  ccExpire_not_ends_with?: Maybe<String>;
  AND?: Maybe<CreditCardScalarWhereInput[] | CreditCardScalarWhereInput>;
  OR?: Maybe<CreditCardScalarWhereInput[] | CreditCardScalarWhereInput>;
  NOT?: Maybe<CreditCardScalarWhereInput[] | CreditCardScalarWhereInput>;
}

export interface CreditCardUpdateManyWithWhereNestedInput {
  where: CreditCardScalarWhereInput;
  data: CreditCardUpdateManyDataInput;
}

export interface CreditCardUpdateManyDataInput {
  active?: Maybe<Boolean>;
  ccToken?: Maybe<String>;
  ccType?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccExpire?: Maybe<String>;
}

export interface PlanUpdateManyWithoutUserInput {
  create?: Maybe<PlanCreateWithoutUserInput[] | PlanCreateWithoutUserInput>;
  delete?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  connect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  set?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  disconnect?: Maybe<PlanWhereUniqueInput[] | PlanWhereUniqueInput>;
  update?: Maybe<
    | PlanUpdateWithWhereUniqueWithoutUserInput[]
    | PlanUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PlanUpsertWithWhereUniqueWithoutUserInput[]
    | PlanUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  updateMany?: Maybe<
    PlanUpdateManyWithWhereNestedInput[] | PlanUpdateManyWithWhereNestedInput
  >;
}

export interface PlanUpdateWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput;
  data: PlanUpdateWithoutUserDataInput;
}

export interface PlanUpdateWithoutUserDataInput {
  status?: Maybe<PlanStatus>;
  visit?: Maybe<VisitUpdateOneRequiredInput>;
  type?: Maybe<PlanType>;
  drugName?: Maybe<String>;
  strength?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  addonName?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  amountDue?: Maybe<Int>;
}

export interface VisitUpdateOneRequiredInput {
  create?: Maybe<VisitCreateInput>;
  update?: Maybe<VisitUpdateDataInput>;
  upsert?: Maybe<VisitUpsertNestedInput>;
  connect?: Maybe<VisitWhereUniqueInput>;
}

export interface VisitUpdateDataInput {
  user?: Maybe<UserUpdateOneWithoutVisitsInput>;
  type?: Maybe<PlanType>;
  questionnaire?: Maybe<Json>;
  status?: Maybe<VisitStatus>;
}

export interface UserUpdateOneWithoutVisitsInput {
  create?: Maybe<UserCreateWithoutVisitsInput>;
  update?: Maybe<UserUpdateWithoutVisitsDataInput>;
  upsert?: Maybe<UserUpsertWithoutVisitsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutVisitsDataInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardUpdateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface AddressUpdateManyWithoutUserInput {
  create?: Maybe<
    AddressCreateWithoutUserInput[] | AddressCreateWithoutUserInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueWithoutUserInput[]
    | AddressUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueWithoutUserInput[]
    | AddressUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutUserDataInput;
}

export interface AddressUpdateWithoutUserDataInput {
  active?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressTwo?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipcode?: Maybe<String>;
  telephone?: Maybe<String>;
}

export interface AddressUpsertWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutUserDataInput;
  create: AddressCreateWithoutUserInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressOne_not?: Maybe<String>;
  addressOne_in?: Maybe<String[] | String>;
  addressOne_not_in?: Maybe<String[] | String>;
  addressOne_lt?: Maybe<String>;
  addressOne_lte?: Maybe<String>;
  addressOne_gt?: Maybe<String>;
  addressOne_gte?: Maybe<String>;
  addressOne_contains?: Maybe<String>;
  addressOne_not_contains?: Maybe<String>;
  addressOne_starts_with?: Maybe<String>;
  addressOne_not_starts_with?: Maybe<String>;
  addressOne_ends_with?: Maybe<String>;
  addressOne_not_ends_with?: Maybe<String>;
  addressTwo?: Maybe<String>;
  addressTwo_not?: Maybe<String>;
  addressTwo_in?: Maybe<String[] | String>;
  addressTwo_not_in?: Maybe<String[] | String>;
  addressTwo_lt?: Maybe<String>;
  addressTwo_lte?: Maybe<String>;
  addressTwo_gt?: Maybe<String>;
  addressTwo_gte?: Maybe<String>;
  addressTwo_contains?: Maybe<String>;
  addressTwo_not_contains?: Maybe<String>;
  addressTwo_starts_with?: Maybe<String>;
  addressTwo_not_starts_with?: Maybe<String>;
  addressTwo_ends_with?: Maybe<String>;
  addressTwo_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<String>;
  zipcode_not?: Maybe<String>;
  zipcode_in?: Maybe<String[] | String>;
  zipcode_not_in?: Maybe<String[] | String>;
  zipcode_lt?: Maybe<String>;
  zipcode_lte?: Maybe<String>;
  zipcode_gt?: Maybe<String>;
  zipcode_gte?: Maybe<String>;
  zipcode_contains?: Maybe<String>;
  zipcode_not_contains?: Maybe<String>;
  zipcode_starts_with?: Maybe<String>;
  zipcode_not_starts_with?: Maybe<String>;
  zipcode_ends_with?: Maybe<String>;
  zipcode_not_ends_with?: Maybe<String>;
  telephone?: Maybe<String>;
  telephone_not?: Maybe<String>;
  telephone_in?: Maybe<String[] | String>;
  telephone_not_in?: Maybe<String[] | String>;
  telephone_lt?: Maybe<String>;
  telephone_lte?: Maybe<String>;
  telephone_gt?: Maybe<String>;
  telephone_gte?: Maybe<String>;
  telephone_contains?: Maybe<String>;
  telephone_not_contains?: Maybe<String>;
  telephone_starts_with?: Maybe<String>;
  telephone_not_starts_with?: Maybe<String>;
  telephone_ends_with?: Maybe<String>;
  telephone_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  active?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressTwo?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipcode?: Maybe<String>;
  telephone?: Maybe<String>;
}

export interface UserUpsertWithoutVisitsInput {
  update: UserUpdateWithoutVisitsDataInput;
  create: UserCreateWithoutVisitsInput;
}

export interface VisitUpsertNestedInput {
  update: VisitUpdateDataInput;
  create: VisitCreateInput;
}

export interface PlanUpsertWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput;
  update: PlanUpdateWithoutUserDataInput;
  create: PlanCreateWithoutUserInput;
}

export interface PlanScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<PlanStatus>;
  status_not?: Maybe<PlanStatus>;
  status_in?: Maybe<PlanStatus[] | PlanStatus>;
  status_not_in?: Maybe<PlanStatus[] | PlanStatus>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  drugName?: Maybe<String>;
  drugName_not?: Maybe<String>;
  drugName_in?: Maybe<String[] | String>;
  drugName_not_in?: Maybe<String[] | String>;
  drugName_lt?: Maybe<String>;
  drugName_lte?: Maybe<String>;
  drugName_gt?: Maybe<String>;
  drugName_gte?: Maybe<String>;
  drugName_contains?: Maybe<String>;
  drugName_not_contains?: Maybe<String>;
  drugName_starts_with?: Maybe<String>;
  drugName_not_starts_with?: Maybe<String>;
  drugName_ends_with?: Maybe<String>;
  drugName_not_ends_with?: Maybe<String>;
  strength?: Maybe<String>;
  strength_not?: Maybe<String>;
  strength_in?: Maybe<String[] | String>;
  strength_not_in?: Maybe<String[] | String>;
  strength_lt?: Maybe<String>;
  strength_lte?: Maybe<String>;
  strength_gt?: Maybe<String>;
  strength_gte?: Maybe<String>;
  strength_contains?: Maybe<String>;
  strength_not_contains?: Maybe<String>;
  strength_starts_with?: Maybe<String>;
  strength_not_starts_with?: Maybe<String>;
  strength_ends_with?: Maybe<String>;
  strength_not_ends_with?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  timesPerMonth_not?: Maybe<Int>;
  timesPerMonth_in?: Maybe<Int[] | Int>;
  timesPerMonth_not_in?: Maybe<Int[] | Int>;
  timesPerMonth_lt?: Maybe<Int>;
  timesPerMonth_lte?: Maybe<Int>;
  timesPerMonth_gt?: Maybe<Int>;
  timesPerMonth_gte?: Maybe<Int>;
  addonName?: Maybe<String>;
  addonName_not?: Maybe<String>;
  addonName_in?: Maybe<String[] | String>;
  addonName_not_in?: Maybe<String[] | String>;
  addonName_lt?: Maybe<String>;
  addonName_lte?: Maybe<String>;
  addonName_gt?: Maybe<String>;
  addonName_gte?: Maybe<String>;
  addonName_contains?: Maybe<String>;
  addonName_not_contains?: Maybe<String>;
  addonName_starts_with?: Maybe<String>;
  addonName_not_starts_with?: Maybe<String>;
  addonName_ends_with?: Maybe<String>;
  addonName_not_ends_with?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  expireDate_not?: Maybe<DateTimeInput>;
  expireDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expireDate_lt?: Maybe<DateTimeInput>;
  expireDate_lte?: Maybe<DateTimeInput>;
  expireDate_gt?: Maybe<DateTimeInput>;
  expireDate_gte?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  totalRefills_not?: Maybe<Int>;
  totalRefills_in?: Maybe<Int[] | Int>;
  totalRefills_not_in?: Maybe<Int[] | Int>;
  totalRefills_lt?: Maybe<Int>;
  totalRefills_lte?: Maybe<Int>;
  totalRefills_gt?: Maybe<Int>;
  totalRefills_gte?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  refillsRemaining_not?: Maybe<Int>;
  refillsRemaining_in?: Maybe<Int[] | Int>;
  refillsRemaining_not_in?: Maybe<Int[] | Int>;
  refillsRemaining_lt?: Maybe<Int>;
  refillsRemaining_lte?: Maybe<Int>;
  refillsRemaining_gt?: Maybe<Int>;
  refillsRemaining_gte?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  nextDelivery_not?: Maybe<DateTimeInput>;
  nextDelivery_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  nextDelivery_lt?: Maybe<DateTimeInput>;
  nextDelivery_lte?: Maybe<DateTimeInput>;
  nextDelivery_gt?: Maybe<DateTimeInput>;
  nextDelivery_gte?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  shippingInterval_not?: Maybe<Int>;
  shippingInterval_in?: Maybe<Int[] | Int>;
  shippingInterval_not_in?: Maybe<Int[] | Int>;
  shippingInterval_lt?: Maybe<Int>;
  shippingInterval_lte?: Maybe<Int>;
  shippingInterval_gt?: Maybe<Int>;
  shippingInterval_gte?: Maybe<Int>;
  amountDue?: Maybe<Int>;
  amountDue_not?: Maybe<Int>;
  amountDue_in?: Maybe<Int[] | Int>;
  amountDue_not_in?: Maybe<Int[] | Int>;
  amountDue_lt?: Maybe<Int>;
  amountDue_lte?: Maybe<Int>;
  amountDue_gt?: Maybe<Int>;
  amountDue_gte?: Maybe<Int>;
  AND?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  OR?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
  NOT?: Maybe<PlanScalarWhereInput[] | PlanScalarWhereInput>;
}

export interface PlanUpdateManyWithWhereNestedInput {
  where: PlanScalarWhereInput;
  data: PlanUpdateManyDataInput;
}

export interface PlanUpdateManyDataInput {
  status?: Maybe<PlanStatus>;
  type?: Maybe<PlanType>;
  drugName?: Maybe<String>;
  strength?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  addonName?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  amountDue?: Maybe<Int>;
}

export interface VisitUpdateManyWithoutUserInput {
  create?: Maybe<VisitCreateWithoutUserInput[] | VisitCreateWithoutUserInput>;
  delete?: Maybe<VisitWhereUniqueInput[] | VisitWhereUniqueInput>;
  connect?: Maybe<VisitWhereUniqueInput[] | VisitWhereUniqueInput>;
  set?: Maybe<VisitWhereUniqueInput[] | VisitWhereUniqueInput>;
  disconnect?: Maybe<VisitWhereUniqueInput[] | VisitWhereUniqueInput>;
  update?: Maybe<
    | VisitUpdateWithWhereUniqueWithoutUserInput[]
    | VisitUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | VisitUpsertWithWhereUniqueWithoutUserInput[]
    | VisitUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<VisitScalarWhereInput[] | VisitScalarWhereInput>;
  updateMany?: Maybe<
    VisitUpdateManyWithWhereNestedInput[] | VisitUpdateManyWithWhereNestedInput
  >;
}

export interface VisitUpdateWithWhereUniqueWithoutUserInput {
  where: VisitWhereUniqueInput;
  data: VisitUpdateWithoutUserDataInput;
}

export interface VisitUpdateWithoutUserDataInput {
  type?: Maybe<PlanType>;
  questionnaire?: Maybe<Json>;
  status?: Maybe<VisitStatus>;
}

export interface VisitUpsertWithWhereUniqueWithoutUserInput {
  where: VisitWhereUniqueInput;
  update: VisitUpdateWithoutUserDataInput;
  create: VisitCreateWithoutUserInput;
}

export interface VisitScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  type?: Maybe<PlanType>;
  type_not?: Maybe<PlanType>;
  type_in?: Maybe<PlanType[] | PlanType>;
  type_not_in?: Maybe<PlanType[] | PlanType>;
  status?: Maybe<VisitStatus>;
  status_not?: Maybe<VisitStatus>;
  status_in?: Maybe<VisitStatus[] | VisitStatus>;
  status_not_in?: Maybe<VisitStatus[] | VisitStatus>;
  AND?: Maybe<VisitScalarWhereInput[] | VisitScalarWhereInput>;
  OR?: Maybe<VisitScalarWhereInput[] | VisitScalarWhereInput>;
  NOT?: Maybe<VisitScalarWhereInput[] | VisitScalarWhereInput>;
}

export interface VisitUpdateManyWithWhereNestedInput {
  where: VisitScalarWhereInput;
  data: VisitUpdateManyDataInput;
}

export interface VisitUpdateManyDataInput {
  type?: Maybe<PlanType>;
  questionnaire?: Maybe<Json>;
  status?: Maybe<VisitStatus>;
}

export interface UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput;
  create: UserCreateWithoutAddressesInput;
}

export interface AddressUpdateManyMutationInput {
  active?: Maybe<Boolean>;
  addressOne?: Maybe<String>;
  addressTwo?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  zipcode?: Maybe<String>;
  telephone?: Maybe<String>;
}

export interface CreditCardCreateInput {
  id?: Maybe<ID_Input>;
  active?: Maybe<Boolean>;
  user: UserCreateOneWithoutCreditCardsInput;
  ccToken: String;
  ccType: String;
  ccNumber: String;
  ccExpire: String;
}

export interface UserCreateOneWithoutCreditCardsInput {
  create?: Maybe<UserCreateWithoutCreditCardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreditCardsInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanCreateManyWithoutUserInput>;
  visits?: Maybe<VisitCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface CreditCardUpdateInput {
  active?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneRequiredWithoutCreditCardsInput>;
  ccToken?: Maybe<String>;
  ccType?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccExpire?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutCreditCardsInput {
  create?: Maybe<UserCreateWithoutCreditCardsInput>;
  update?: Maybe<UserUpdateWithoutCreditCardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreditCardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreditCardsDataInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
  visits?: Maybe<VisitUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface UserUpsertWithoutCreditCardsInput {
  update: UserUpdateWithoutCreditCardsDataInput;
  create: UserCreateWithoutCreditCardsInput;
}

export interface CreditCardUpdateManyMutationInput {
  active?: Maybe<Boolean>;
  ccToken?: Maybe<String>;
  ccType?: Maybe<String>;
  ccNumber?: Maybe<String>;
  ccExpire?: Maybe<String>;
}

export interface PlanCreateInput {
  id?: Maybe<ID_Input>;
  status?: Maybe<PlanStatus>;
  user: UserCreateOneWithoutPlansInput;
  visit: VisitCreateOneInput;
  type: PlanType;
  drugName: String;
  strength?: Maybe<String>;
  timesPerMonth: Int;
  addonName?: Maybe<String>;
  startDate: DateTimeInput;
  expireDate: DateTimeInput;
  totalRefills: Int;
  refillsRemaining: Int;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval: Int;
  amountDue: Int;
}

export interface UserCreateOneWithoutPlansInput {
  create?: Maybe<UserCreateWithoutPlansInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPlansInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardCreateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  visits?: Maybe<VisitCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface PlanUpdateInput {
  status?: Maybe<PlanStatus>;
  user?: Maybe<UserUpdateOneRequiredWithoutPlansInput>;
  visit?: Maybe<VisitUpdateOneRequiredInput>;
  type?: Maybe<PlanType>;
  drugName?: Maybe<String>;
  strength?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  addonName?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  amountDue?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutPlansInput {
  create?: Maybe<UserCreateWithoutPlansInput>;
  update?: Maybe<UserUpdateWithoutPlansDataInput>;
  upsert?: Maybe<UserUpsertWithoutPlansInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPlansDataInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardUpdateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  visits?: Maybe<VisitUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface UserUpsertWithoutPlansInput {
  update: UserUpdateWithoutPlansDataInput;
  create: UserCreateWithoutPlansInput;
}

export interface PlanUpdateManyMutationInput {
  status?: Maybe<PlanStatus>;
  type?: Maybe<PlanType>;
  drugName?: Maybe<String>;
  strength?: Maybe<String>;
  timesPerMonth?: Maybe<Int>;
  addonName?: Maybe<String>;
  startDate?: Maybe<DateTimeInput>;
  expireDate?: Maybe<DateTimeInput>;
  totalRefills?: Maybe<Int>;
  refillsRemaining?: Maybe<Int>;
  nextDelivery?: Maybe<DateTimeInput>;
  shippingInterval?: Maybe<Int>;
  amountDue?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  role?: Maybe<Role>;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardCreateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanCreateManyWithoutUserInput>;
  visits?: Maybe<VisitCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface UserUpdateInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  creditCards?: Maybe<CreditCardUpdateManyWithoutUserInput>;
  photoId?: Maybe<String>;
  plans?: Maybe<PlanUpdateManyWithoutUserInput>;
  visits?: Maybe<VisitUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  role?: Maybe<Role>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  password?: Maybe<String>;
  email?: Maybe<String>;
  photoId?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  count?: Maybe<Int>;
}

export interface VisitUpdateInput {
  user?: Maybe<UserUpdateOneWithoutVisitsInput>;
  type?: Maybe<PlanType>;
  questionnaire?: Maybe<Json>;
  status?: Maybe<VisitStatus>;
}

export interface VisitUpdateManyMutationInput {
  type?: Maybe<PlanType>;
  questionnaire?: Maybe<Json>;
  status?: Maybe<VisitStatus>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface CreditCardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CreditCardWhereInput>;
  AND?: Maybe<
    CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput
  >;
  OR?: Maybe<
    CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CreditCardSubscriptionWhereInput[] | CreditCardSubscriptionWhereInput
  >;
}

export interface PlanSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlanWhereInput>;
  AND?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  OR?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
  NOT?: Maybe<PlanSubscriptionWhereInput[] | PlanSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VisitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VisitWhereInput>;
  AND?: Maybe<VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput>;
  OR?: Maybe<VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput>;
  NOT?: Maybe<VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active: Boolean;
  addressOne: String;
  addressTwo?: String;
  city: String;
  state: String;
  zipcode: String;
  telephone: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  active: () => Promise<Boolean>;
  addressOne: () => Promise<String>;
  addressTwo: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipcode: () => Promise<String>;
  telephone: () => Promise<String>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  active: () => Promise<AsyncIterator<Boolean>>;
  addressOne: () => Promise<AsyncIterator<String>>;
  addressTwo: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<String>>;
  telephone: () => Promise<AsyncIterator<String>>;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  active: () => Promise<Boolean>;
  addressOne: () => Promise<String>;
  addressTwo: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipcode: () => Promise<String>;
  telephone: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  photoId?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  count?: Int;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creditCards: <T = FragmentableArray<CreditCard>>(args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photoId: () => Promise<String>;
  plans: <T = FragmentableArray<Plan>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visits: <T = FragmentableArray<Visit>>(args?: {
    where?: VisitWhereInput;
    orderBy?: VisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  count: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creditCards: <T = Promise<AsyncIterator<CreditCardSubscription>>>(args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photoId: () => Promise<AsyncIterator<String>>;
  plans: <T = Promise<AsyncIterator<PlanSubscription>>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visits: <T = Promise<AsyncIterator<VisitSubscription>>>(args?: {
    where?: VisitWhereInput;
    orderBy?: VisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  creditCards: <T = FragmentableArray<CreditCard>>(args?: {
    where?: CreditCardWhereInput;
    orderBy?: CreditCardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photoId: () => Promise<String>;
  plans: <T = FragmentableArray<Plan>>(args?: {
    where?: PlanWhereInput;
    orderBy?: PlanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  visits: <T = FragmentableArray<Visit>>(args?: {
    where?: VisitWhereInput;
    orderBy?: VisitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  count: () => Promise<Int>;
}

export interface CreditCard {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active: Boolean;
  ccToken: String;
  ccType: String;
  ccNumber: String;
  ccExpire: String;
}

export interface CreditCardPromise extends Promise<CreditCard>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  ccToken: () => Promise<String>;
  ccType: () => Promise<String>;
  ccNumber: () => Promise<String>;
  ccExpire: () => Promise<String>;
}

export interface CreditCardSubscription
  extends Promise<AsyncIterator<CreditCard>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  user: <T = UserSubscription>() => T;
  ccToken: () => Promise<AsyncIterator<String>>;
  ccType: () => Promise<AsyncIterator<String>>;
  ccNumber: () => Promise<AsyncIterator<String>>;
  ccExpire: () => Promise<AsyncIterator<String>>;
}

export interface CreditCardNullablePromise
  extends Promise<CreditCard | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  ccToken: () => Promise<String>;
  ccType: () => Promise<String>;
  ccNumber: () => Promise<String>;
  ccExpire: () => Promise<String>;
}

export interface Plan {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: PlanStatus;
  type: PlanType;
  drugName: String;
  strength?: String;
  timesPerMonth: Int;
  addonName?: String;
  startDate: DateTimeOutput;
  expireDate: DateTimeOutput;
  totalRefills: Int;
  refillsRemaining: Int;
  nextDelivery?: DateTimeOutput;
  shippingInterval: Int;
  amountDue: Int;
}

export interface PlanPromise extends Promise<Plan>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<PlanStatus>;
  user: <T = UserPromise>() => T;
  visit: <T = VisitPromise>() => T;
  type: () => Promise<PlanType>;
  drugName: () => Promise<String>;
  strength: () => Promise<String>;
  timesPerMonth: () => Promise<Int>;
  addonName: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  totalRefills: () => Promise<Int>;
  refillsRemaining: () => Promise<Int>;
  nextDelivery: () => Promise<DateTimeOutput>;
  shippingInterval: () => Promise<Int>;
  amountDue: () => Promise<Int>;
}

export interface PlanSubscription
  extends Promise<AsyncIterator<Plan>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<PlanStatus>>;
  user: <T = UserSubscription>() => T;
  visit: <T = VisitSubscription>() => T;
  type: () => Promise<AsyncIterator<PlanType>>;
  drugName: () => Promise<AsyncIterator<String>>;
  strength: () => Promise<AsyncIterator<String>>;
  timesPerMonth: () => Promise<AsyncIterator<Int>>;
  addonName: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalRefills: () => Promise<AsyncIterator<Int>>;
  refillsRemaining: () => Promise<AsyncIterator<Int>>;
  nextDelivery: () => Promise<AsyncIterator<DateTimeOutput>>;
  shippingInterval: () => Promise<AsyncIterator<Int>>;
  amountDue: () => Promise<AsyncIterator<Int>>;
}

export interface PlanNullablePromise
  extends Promise<Plan | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<PlanStatus>;
  user: <T = UserPromise>() => T;
  visit: <T = VisitPromise>() => T;
  type: () => Promise<PlanType>;
  drugName: () => Promise<String>;
  strength: () => Promise<String>;
  timesPerMonth: () => Promise<Int>;
  addonName: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  totalRefills: () => Promise<Int>;
  refillsRemaining: () => Promise<Int>;
  nextDelivery: () => Promise<DateTimeOutput>;
  shippingInterval: () => Promise<Int>;
  amountDue: () => Promise<Int>;
}

export interface Visit {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: PlanType;
  questionnaire: Json;
  status: VisitStatus;
}

export interface VisitPromise extends Promise<Visit>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  type: () => Promise<PlanType>;
  questionnaire: () => Promise<Json>;
  status: () => Promise<VisitStatus>;
}

export interface VisitSubscription
  extends Promise<AsyncIterator<Visit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<PlanType>>;
  questionnaire: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<VisitStatus>>;
}

export interface VisitNullablePromise
  extends Promise<Visit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  type: () => Promise<PlanType>;
  questionnaire: () => Promise<Json>;
  status: () => Promise<VisitStatus>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CreditCardConnection {
  pageInfo: PageInfo;
  edges: CreditCardEdge[];
}

export interface CreditCardConnectionPromise
  extends Promise<CreditCardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CreditCardEdge>>() => T;
  aggregate: <T = AggregateCreditCardPromise>() => T;
}

export interface CreditCardConnectionSubscription
  extends Promise<AsyncIterator<CreditCardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CreditCardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCreditCardSubscription>() => T;
}

export interface CreditCardEdge {
  node: CreditCard;
  cursor: String;
}

export interface CreditCardEdgePromise
  extends Promise<CreditCardEdge>,
    Fragmentable {
  node: <T = CreditCardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CreditCardEdgeSubscription
  extends Promise<AsyncIterator<CreditCardEdge>>,
    Fragmentable {
  node: <T = CreditCardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCreditCard {
  count: Int;
}

export interface AggregateCreditCardPromise
  extends Promise<AggregateCreditCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCreditCardSubscription
  extends Promise<AsyncIterator<AggregateCreditCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlanConnection {
  pageInfo: PageInfo;
  edges: PlanEdge[];
}

export interface PlanConnectionPromise
  extends Promise<PlanConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlanEdge>>() => T;
  aggregate: <T = AggregatePlanPromise>() => T;
}

export interface PlanConnectionSubscription
  extends Promise<AsyncIterator<PlanConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlanEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlanSubscription>() => T;
}

export interface PlanEdge {
  node: Plan;
  cursor: String;
}

export interface PlanEdgePromise extends Promise<PlanEdge>, Fragmentable {
  node: <T = PlanPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlanEdgeSubscription
  extends Promise<AsyncIterator<PlanEdge>>,
    Fragmentable {
  node: <T = PlanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlan {
  count: Int;
}

export interface AggregatePlanPromise
  extends Promise<AggregatePlan>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlanSubscription
  extends Promise<AsyncIterator<AggregatePlan>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VisitConnection {
  pageInfo: PageInfo;
  edges: VisitEdge[];
}

export interface VisitConnectionPromise
  extends Promise<VisitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VisitEdge>>() => T;
  aggregate: <T = AggregateVisitPromise>() => T;
}

export interface VisitConnectionSubscription
  extends Promise<AsyncIterator<VisitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VisitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVisitSubscription>() => T;
}

export interface VisitEdge {
  node: Visit;
  cursor: String;
}

export interface VisitEdgePromise extends Promise<VisitEdge>, Fragmentable {
  node: <T = VisitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VisitEdgeSubscription
  extends Promise<AsyncIterator<VisitEdge>>,
    Fragmentable {
  node: <T = VisitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVisit {
  count: Int;
}

export interface AggregateVisitPromise
  extends Promise<AggregateVisit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVisitSubscription
  extends Promise<AsyncIterator<AggregateVisit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active: Boolean;
  addressOne: String;
  addressTwo?: String;
  city: String;
  state: String;
  zipcode: String;
  telephone: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  addressOne: () => Promise<String>;
  addressTwo: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zipcode: () => Promise<String>;
  telephone: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  addressOne: () => Promise<AsyncIterator<String>>;
  addressTwo: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<String>>;
  telephone: () => Promise<AsyncIterator<String>>;
}

export interface CreditCardSubscriptionPayload {
  mutation: MutationType;
  node: CreditCard;
  updatedFields: String[];
  previousValues: CreditCardPreviousValues;
}

export interface CreditCardSubscriptionPayloadPromise
  extends Promise<CreditCardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CreditCardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CreditCardPreviousValuesPromise>() => T;
}

export interface CreditCardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CreditCardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CreditCardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CreditCardPreviousValuesSubscription>() => T;
}

export interface CreditCardPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  active: Boolean;
  ccToken: String;
  ccType: String;
  ccNumber: String;
  ccExpire: String;
}

export interface CreditCardPreviousValuesPromise
  extends Promise<CreditCardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  active: () => Promise<Boolean>;
  ccToken: () => Promise<String>;
  ccType: () => Promise<String>;
  ccNumber: () => Promise<String>;
  ccExpire: () => Promise<String>;
}

export interface CreditCardPreviousValuesSubscription
  extends Promise<AsyncIterator<CreditCardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  ccToken: () => Promise<AsyncIterator<String>>;
  ccType: () => Promise<AsyncIterator<String>>;
  ccNumber: () => Promise<AsyncIterator<String>>;
  ccExpire: () => Promise<AsyncIterator<String>>;
}

export interface PlanSubscriptionPayload {
  mutation: MutationType;
  node: Plan;
  updatedFields: String[];
  previousValues: PlanPreviousValues;
}

export interface PlanSubscriptionPayloadPromise
  extends Promise<PlanSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlanPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlanPreviousValuesPromise>() => T;
}

export interface PlanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlanSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlanPreviousValuesSubscription>() => T;
}

export interface PlanPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: PlanStatus;
  type: PlanType;
  drugName: String;
  strength?: String;
  timesPerMonth: Int;
  addonName?: String;
  startDate: DateTimeOutput;
  expireDate: DateTimeOutput;
  totalRefills: Int;
  refillsRemaining: Int;
  nextDelivery?: DateTimeOutput;
  shippingInterval: Int;
  amountDue: Int;
}

export interface PlanPreviousValuesPromise
  extends Promise<PlanPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<PlanStatus>;
  type: () => Promise<PlanType>;
  drugName: () => Promise<String>;
  strength: () => Promise<String>;
  timesPerMonth: () => Promise<Int>;
  addonName: () => Promise<String>;
  startDate: () => Promise<DateTimeOutput>;
  expireDate: () => Promise<DateTimeOutput>;
  totalRefills: () => Promise<Int>;
  refillsRemaining: () => Promise<Int>;
  nextDelivery: () => Promise<DateTimeOutput>;
  shippingInterval: () => Promise<Int>;
  amountDue: () => Promise<Int>;
}

export interface PlanPreviousValuesSubscription
  extends Promise<AsyncIterator<PlanPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<PlanStatus>>;
  type: () => Promise<AsyncIterator<PlanType>>;
  drugName: () => Promise<AsyncIterator<String>>;
  strength: () => Promise<AsyncIterator<String>>;
  timesPerMonth: () => Promise<AsyncIterator<Int>>;
  addonName: () => Promise<AsyncIterator<String>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  totalRefills: () => Promise<AsyncIterator<Int>>;
  refillsRemaining: () => Promise<AsyncIterator<Int>>;
  nextDelivery: () => Promise<AsyncIterator<DateTimeOutput>>;
  shippingInterval: () => Promise<AsyncIterator<Int>>;
  amountDue: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role?: Role;
  firstName: String;
  lastName: String;
  password: String;
  email: String;
  photoId?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  count?: Int;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  photoId: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  count: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  photoId: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VisitSubscriptionPayload {
  mutation: MutationType;
  node: Visit;
  updatedFields: String[];
  previousValues: VisitPreviousValues;
}

export interface VisitSubscriptionPayloadPromise
  extends Promise<VisitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VisitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VisitPreviousValuesPromise>() => T;
}

export interface VisitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VisitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VisitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VisitPreviousValuesSubscription>() => T;
}

export interface VisitPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  type: PlanType;
  questionnaire: Json;
  status: VisitStatus;
}

export interface VisitPreviousValuesPromise
  extends Promise<VisitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  type: () => Promise<PlanType>;
  questionnaire: () => Promise<Json>;
  status: () => Promise<VisitStatus>;
}

export interface VisitPreviousValuesSubscription
  extends Promise<AsyncIterator<VisitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<PlanType>>;
  questionnaire: () => Promise<AsyncIterator<Json>>;
  status: () => Promise<AsyncIterator<VisitStatus>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "VisitStatus",
    embedded: false
  },
  {
    name: "PlanStatus",
    embedded: false
  },
  {
    name: "PlanType",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Visit",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Plan",
    embedded: false
  },
  {
    name: "CreditCard",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
