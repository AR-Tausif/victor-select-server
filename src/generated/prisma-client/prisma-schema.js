module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  active: Boolean!
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zipcode: String!
  telephone: String!
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  user: UserCreateOneWithoutAddressesInput!
  active: Boolean
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zipcode: String!
  telephone: String!
}

input AddressCreateManyWithoutUserInput {
  create: [AddressCreateWithoutUserInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutUserInput {
  id: ID
  active: Boolean
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zipcode: String!
  telephone: String!
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  active_ASC
  active_DESC
  addressOne_ASC
  addressOne_DESC
  addressTwo_ASC
  addressTwo_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zipcode_ASC
  zipcode_DESC
  telephone_ASC
  telephone_DESC
}

type AddressPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zipcode: String!
  telephone: String!
}

input AddressScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  active: Boolean
  active_not: Boolean
  addressOne: String
  addressOne_not: String
  addressOne_in: [String!]
  addressOne_not_in: [String!]
  addressOne_lt: String
  addressOne_lte: String
  addressOne_gt: String
  addressOne_gte: String
  addressOne_contains: String
  addressOne_not_contains: String
  addressOne_starts_with: String
  addressOne_not_starts_with: String
  addressOne_ends_with: String
  addressOne_not_ends_with: String
  addressTwo: String
  addressTwo_not: String
  addressTwo_in: [String!]
  addressTwo_not_in: [String!]
  addressTwo_lt: String
  addressTwo_lte: String
  addressTwo_gt: String
  addressTwo_gte: String
  addressTwo_contains: String
  addressTwo_not_contains: String
  addressTwo_starts_with: String
  addressTwo_not_starts_with: String
  addressTwo_ends_with: String
  addressTwo_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: String
  zipcode_not: String
  zipcode_in: [String!]
  zipcode_not_in: [String!]
  zipcode_lt: String
  zipcode_lte: String
  zipcode_gt: String
  zipcode_gte: String
  zipcode_contains: String
  zipcode_not_contains: String
  zipcode_starts_with: String
  zipcode_not_starts_with: String
  zipcode_ends_with: String
  zipcode_not_ends_with: String
  telephone: String
  telephone_not: String
  telephone_in: [String!]
  telephone_not_in: [String!]
  telephone_lt: String
  telephone_lte: String
  telephone_gt: String
  telephone_gte: String
  telephone_contains: String
  telephone_not_contains: String
  telephone_starts_with: String
  telephone_not_starts_with: String
  telephone_ends_with: String
  telephone_not_ends_with: String
  AND: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateInput {
  user: UserUpdateOneRequiredWithoutAddressesInput
  active: Boolean
  addressOne: String
  addressTwo: String
  city: String
  state: String
  zipcode: String
  telephone: String
}

input AddressUpdateManyDataInput {
  active: Boolean
  addressOne: String
  addressTwo: String
  city: String
  state: String
  zipcode: String
  telephone: String
}

input AddressUpdateManyMutationInput {
  active: Boolean
  addressOne: String
  addressTwo: String
  city: String
  state: String
  zipcode: String
  telephone: String
}

input AddressUpdateManyWithoutUserInput {
  create: [AddressCreateWithoutUserInput!]
  delete: [AddressWhereUniqueInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [AddressScalarWhereInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateWithoutUserDataInput {
  active: Boolean
  addressOne: String
  addressTwo: String
  city: String
  state: String
  zipcode: String
  telephone: String
}

input AddressUpdateWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateWithoutUserDataInput!
}

input AddressUpsertWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateWithoutUserDataInput!
  create: AddressCreateWithoutUserInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  active: Boolean
  active_not: Boolean
  addressOne: String
  addressOne_not: String
  addressOne_in: [String!]
  addressOne_not_in: [String!]
  addressOne_lt: String
  addressOne_lte: String
  addressOne_gt: String
  addressOne_gte: String
  addressOne_contains: String
  addressOne_not_contains: String
  addressOne_starts_with: String
  addressOne_not_starts_with: String
  addressOne_ends_with: String
  addressOne_not_ends_with: String
  addressTwo: String
  addressTwo_not: String
  addressTwo_in: [String!]
  addressTwo_not_in: [String!]
  addressTwo_lt: String
  addressTwo_lte: String
  addressTwo_gt: String
  addressTwo_gte: String
  addressTwo_contains: String
  addressTwo_not_contains: String
  addressTwo_starts_with: String
  addressTwo_not_starts_with: String
  addressTwo_ends_with: String
  addressTwo_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  zipcode: String
  zipcode_not: String
  zipcode_in: [String!]
  zipcode_not_in: [String!]
  zipcode_lt: String
  zipcode_lte: String
  zipcode_gt: String
  zipcode_gte: String
  zipcode_contains: String
  zipcode_not_contains: String
  zipcode_starts_with: String
  zipcode_not_starts_with: String
  zipcode_ends_with: String
  zipcode_not_ends_with: String
  telephone: String
  telephone_not: String
  telephone_in: [String!]
  telephone_not_in: [String!]
  telephone_lt: String
  telephone_lte: String
  telephone_gt: String
  telephone_gte: String
  telephone_contains: String
  telephone_not_contains: String
  telephone_starts_with: String
  telephone_not_starts_with: String
  telephone_ends_with: String
  telephone_not_ends_with: String
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateCreditCard {
  count: Int!
}

type AggregatePlan {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVisit {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CreditCard {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  user: User!
  ccToken: String!
  ccType: String!
  ccNumber: String!
  ccExpire: String!
}

type CreditCardConnection {
  pageInfo: PageInfo!
  edges: [CreditCardEdge]!
  aggregate: AggregateCreditCard!
}

input CreditCardCreateInput {
  id: ID
  active: Boolean
  user: UserCreateOneWithoutCreditCardsInput!
  ccToken: String!
  ccType: String!
  ccNumber: String!
  ccExpire: String!
}

input CreditCardCreateManyWithoutUserInput {
  create: [CreditCardCreateWithoutUserInput!]
  connect: [CreditCardWhereUniqueInput!]
}

input CreditCardCreateWithoutUserInput {
  id: ID
  active: Boolean
  ccToken: String!
  ccType: String!
  ccNumber: String!
  ccExpire: String!
}

type CreditCardEdge {
  node: CreditCard!
  cursor: String!
}

enum CreditCardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  active_ASC
  active_DESC
  ccToken_ASC
  ccToken_DESC
  ccType_ASC
  ccType_DESC
  ccNumber_ASC
  ccNumber_DESC
  ccExpire_ASC
  ccExpire_DESC
}

type CreditCardPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  active: Boolean!
  ccToken: String!
  ccType: String!
  ccNumber: String!
  ccExpire: String!
}

input CreditCardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  active: Boolean
  active_not: Boolean
  ccToken: String
  ccToken_not: String
  ccToken_in: [String!]
  ccToken_not_in: [String!]
  ccToken_lt: String
  ccToken_lte: String
  ccToken_gt: String
  ccToken_gte: String
  ccToken_contains: String
  ccToken_not_contains: String
  ccToken_starts_with: String
  ccToken_not_starts_with: String
  ccToken_ends_with: String
  ccToken_not_ends_with: String
  ccType: String
  ccType_not: String
  ccType_in: [String!]
  ccType_not_in: [String!]
  ccType_lt: String
  ccType_lte: String
  ccType_gt: String
  ccType_gte: String
  ccType_contains: String
  ccType_not_contains: String
  ccType_starts_with: String
  ccType_not_starts_with: String
  ccType_ends_with: String
  ccType_not_ends_with: String
  ccNumber: String
  ccNumber_not: String
  ccNumber_in: [String!]
  ccNumber_not_in: [String!]
  ccNumber_lt: String
  ccNumber_lte: String
  ccNumber_gt: String
  ccNumber_gte: String
  ccNumber_contains: String
  ccNumber_not_contains: String
  ccNumber_starts_with: String
  ccNumber_not_starts_with: String
  ccNumber_ends_with: String
  ccNumber_not_ends_with: String
  ccExpire: String
  ccExpire_not: String
  ccExpire_in: [String!]
  ccExpire_not_in: [String!]
  ccExpire_lt: String
  ccExpire_lte: String
  ccExpire_gt: String
  ccExpire_gte: String
  ccExpire_contains: String
  ccExpire_not_contains: String
  ccExpire_starts_with: String
  ccExpire_not_starts_with: String
  ccExpire_ends_with: String
  ccExpire_not_ends_with: String
  AND: [CreditCardScalarWhereInput!]
  OR: [CreditCardScalarWhereInput!]
  NOT: [CreditCardScalarWhereInput!]
}

type CreditCardSubscriptionPayload {
  mutation: MutationType!
  node: CreditCard
  updatedFields: [String!]
  previousValues: CreditCardPreviousValues
}

input CreditCardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CreditCardWhereInput
  AND: [CreditCardSubscriptionWhereInput!]
  OR: [CreditCardSubscriptionWhereInput!]
  NOT: [CreditCardSubscriptionWhereInput!]
}

input CreditCardUpdateInput {
  active: Boolean
  user: UserUpdateOneRequiredWithoutCreditCardsInput
  ccToken: String
  ccType: String
  ccNumber: String
  ccExpire: String
}

input CreditCardUpdateManyDataInput {
  active: Boolean
  ccToken: String
  ccType: String
  ccNumber: String
  ccExpire: String
}

input CreditCardUpdateManyMutationInput {
  active: Boolean
  ccToken: String
  ccType: String
  ccNumber: String
  ccExpire: String
}

input CreditCardUpdateManyWithoutUserInput {
  create: [CreditCardCreateWithoutUserInput!]
  delete: [CreditCardWhereUniqueInput!]
  connect: [CreditCardWhereUniqueInput!]
  set: [CreditCardWhereUniqueInput!]
  disconnect: [CreditCardWhereUniqueInput!]
  update: [CreditCardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CreditCardUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CreditCardScalarWhereInput!]
  updateMany: [CreditCardUpdateManyWithWhereNestedInput!]
}

input CreditCardUpdateManyWithWhereNestedInput {
  where: CreditCardScalarWhereInput!
  data: CreditCardUpdateManyDataInput!
}

input CreditCardUpdateWithoutUserDataInput {
  active: Boolean
  ccToken: String
  ccType: String
  ccNumber: String
  ccExpire: String
}

input CreditCardUpdateWithWhereUniqueWithoutUserInput {
  where: CreditCardWhereUniqueInput!
  data: CreditCardUpdateWithoutUserDataInput!
}

input CreditCardUpsertWithWhereUniqueWithoutUserInput {
  where: CreditCardWhereUniqueInput!
  update: CreditCardUpdateWithoutUserDataInput!
  create: CreditCardCreateWithoutUserInput!
}

input CreditCardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  active: Boolean
  active_not: Boolean
  user: UserWhereInput
  ccToken: String
  ccToken_not: String
  ccToken_in: [String!]
  ccToken_not_in: [String!]
  ccToken_lt: String
  ccToken_lte: String
  ccToken_gt: String
  ccToken_gte: String
  ccToken_contains: String
  ccToken_not_contains: String
  ccToken_starts_with: String
  ccToken_not_starts_with: String
  ccToken_ends_with: String
  ccToken_not_ends_with: String
  ccType: String
  ccType_not: String
  ccType_in: [String!]
  ccType_not_in: [String!]
  ccType_lt: String
  ccType_lte: String
  ccType_gt: String
  ccType_gte: String
  ccType_contains: String
  ccType_not_contains: String
  ccType_starts_with: String
  ccType_not_starts_with: String
  ccType_ends_with: String
  ccType_not_ends_with: String
  ccNumber: String
  ccNumber_not: String
  ccNumber_in: [String!]
  ccNumber_not_in: [String!]
  ccNumber_lt: String
  ccNumber_lte: String
  ccNumber_gt: String
  ccNumber_gte: String
  ccNumber_contains: String
  ccNumber_not_contains: String
  ccNumber_starts_with: String
  ccNumber_not_starts_with: String
  ccNumber_ends_with: String
  ccNumber_not_ends_with: String
  ccExpire: String
  ccExpire_not: String
  ccExpire_in: [String!]
  ccExpire_not_in: [String!]
  ccExpire_lt: String
  ccExpire_lte: String
  ccExpire_gt: String
  ccExpire_gte: String
  ccExpire_contains: String
  ccExpire_not_contains: String
  ccExpire_starts_with: String
  ccExpire_not_starts_with: String
  ccExpire_ends_with: String
  ccExpire_not_ends_with: String
  AND: [CreditCardWhereInput!]
  OR: [CreditCardWhereInput!]
  NOT: [CreditCardWhereInput!]
}

input CreditCardWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createCreditCard(data: CreditCardCreateInput!): CreditCard!
  updateCreditCard(data: CreditCardUpdateInput!, where: CreditCardWhereUniqueInput!): CreditCard
  updateManyCreditCards(data: CreditCardUpdateManyMutationInput!, where: CreditCardWhereInput): BatchPayload!
  upsertCreditCard(where: CreditCardWhereUniqueInput!, create: CreditCardCreateInput!, update: CreditCardUpdateInput!): CreditCard!
  deleteCreditCard(where: CreditCardWhereUniqueInput!): CreditCard
  deleteManyCreditCards(where: CreditCardWhereInput): BatchPayload!
  createPlan(data: PlanCreateInput!): Plan!
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVisit(data: VisitCreateInput!): Visit!
  updateVisit(data: VisitUpdateInput!, where: VisitWhereUniqueInput!): Visit
  updateManyVisits(data: VisitUpdateManyMutationInput!, where: VisitWhereInput): BatchPayload!
  upsertVisit(where: VisitWhereUniqueInput!, create: VisitCreateInput!, update: VisitUpdateInput!): Visit!
  deleteVisit(where: VisitWhereUniqueInput!): Visit
  deleteManyVisits(where: VisitWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Plan {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: PlanStatus!
  user: User!
  visit: Visit!
  type: PlanType!
  drugName: String!
  strength: String
  timesPerMonth: Int!
  addonName: String
  startDate: DateTime!
  expireDate: DateTime!
  totalRefills: Int!
  refillsRemaining: Int!
  nextDelivery: DateTime
  shippingInterval: Int!
  amountDue: Int!
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  id: ID
  status: PlanStatus
  user: UserCreateOneWithoutPlansInput!
  visit: VisitCreateOneInput!
  type: PlanType!
  drugName: String!
  strength: String
  timesPerMonth: Int!
  addonName: String
  startDate: DateTime!
  expireDate: DateTime!
  totalRefills: Int!
  refillsRemaining: Int!
  nextDelivery: DateTime
  shippingInterval: Int!
  amountDue: Int!
}

input PlanCreateManyWithoutUserInput {
  create: [PlanCreateWithoutUserInput!]
  connect: [PlanWhereUniqueInput!]
}

input PlanCreateWithoutUserInput {
  id: ID
  status: PlanStatus
  visit: VisitCreateOneInput!
  type: PlanType!
  drugName: String!
  strength: String
  timesPerMonth: Int!
  addonName: String
  startDate: DateTime!
  expireDate: DateTime!
  totalRefills: Int!
  refillsRemaining: Int!
  nextDelivery: DateTime
  shippingInterval: Int!
  amountDue: Int!
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  drugName_ASC
  drugName_DESC
  strength_ASC
  strength_DESC
  timesPerMonth_ASC
  timesPerMonth_DESC
  addonName_ASC
  addonName_DESC
  startDate_ASC
  startDate_DESC
  expireDate_ASC
  expireDate_DESC
  totalRefills_ASC
  totalRefills_DESC
  refillsRemaining_ASC
  refillsRemaining_DESC
  nextDelivery_ASC
  nextDelivery_DESC
  shippingInterval_ASC
  shippingInterval_DESC
  amountDue_ASC
  amountDue_DESC
}

type PlanPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: PlanStatus!
  type: PlanType!
  drugName: String!
  strength: String
  timesPerMonth: Int!
  addonName: String
  startDate: DateTime!
  expireDate: DateTime!
  totalRefills: Int!
  refillsRemaining: Int!
  nextDelivery: DateTime
  shippingInterval: Int!
  amountDue: Int!
}

input PlanScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: PlanStatus
  status_not: PlanStatus
  status_in: [PlanStatus!]
  status_not_in: [PlanStatus!]
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  drugName: String
  drugName_not: String
  drugName_in: [String!]
  drugName_not_in: [String!]
  drugName_lt: String
  drugName_lte: String
  drugName_gt: String
  drugName_gte: String
  drugName_contains: String
  drugName_not_contains: String
  drugName_starts_with: String
  drugName_not_starts_with: String
  drugName_ends_with: String
  drugName_not_ends_with: String
  strength: String
  strength_not: String
  strength_in: [String!]
  strength_not_in: [String!]
  strength_lt: String
  strength_lte: String
  strength_gt: String
  strength_gte: String
  strength_contains: String
  strength_not_contains: String
  strength_starts_with: String
  strength_not_starts_with: String
  strength_ends_with: String
  strength_not_ends_with: String
  timesPerMonth: Int
  timesPerMonth_not: Int
  timesPerMonth_in: [Int!]
  timesPerMonth_not_in: [Int!]
  timesPerMonth_lt: Int
  timesPerMonth_lte: Int
  timesPerMonth_gt: Int
  timesPerMonth_gte: Int
  addonName: String
  addonName_not: String
  addonName_in: [String!]
  addonName_not_in: [String!]
  addonName_lt: String
  addonName_lte: String
  addonName_gt: String
  addonName_gte: String
  addonName_contains: String
  addonName_not_contains: String
  addonName_starts_with: String
  addonName_not_starts_with: String
  addonName_ends_with: String
  addonName_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  totalRefills: Int
  totalRefills_not: Int
  totalRefills_in: [Int!]
  totalRefills_not_in: [Int!]
  totalRefills_lt: Int
  totalRefills_lte: Int
  totalRefills_gt: Int
  totalRefills_gte: Int
  refillsRemaining: Int
  refillsRemaining_not: Int
  refillsRemaining_in: [Int!]
  refillsRemaining_not_in: [Int!]
  refillsRemaining_lt: Int
  refillsRemaining_lte: Int
  refillsRemaining_gt: Int
  refillsRemaining_gte: Int
  nextDelivery: DateTime
  nextDelivery_not: DateTime
  nextDelivery_in: [DateTime!]
  nextDelivery_not_in: [DateTime!]
  nextDelivery_lt: DateTime
  nextDelivery_lte: DateTime
  nextDelivery_gt: DateTime
  nextDelivery_gte: DateTime
  shippingInterval: Int
  shippingInterval_not: Int
  shippingInterval_in: [Int!]
  shippingInterval_not_in: [Int!]
  shippingInterval_lt: Int
  shippingInterval_lte: Int
  shippingInterval_gt: Int
  shippingInterval_gte: Int
  amountDue: Int
  amountDue_not: Int
  amountDue_in: [Int!]
  amountDue_not_in: [Int!]
  amountDue_lt: Int
  amountDue_lte: Int
  amountDue_gt: Int
  amountDue_gte: Int
  AND: [PlanScalarWhereInput!]
  OR: [PlanScalarWhereInput!]
  NOT: [PlanScalarWhereInput!]
}

enum PlanStatus {
  PENDING
  ACTIVE
  ONDEMAND
  CLOSED
  DENIED
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

enum PlanType {
  ED
  HAIR
  SLEEP
  JOY
  ALLERGY
  WEIGHT
}

input PlanUpdateInput {
  status: PlanStatus
  user: UserUpdateOneRequiredWithoutPlansInput
  visit: VisitUpdateOneRequiredInput
  type: PlanType
  drugName: String
  strength: String
  timesPerMonth: Int
  addonName: String
  startDate: DateTime
  expireDate: DateTime
  totalRefills: Int
  refillsRemaining: Int
  nextDelivery: DateTime
  shippingInterval: Int
  amountDue: Int
}

input PlanUpdateManyDataInput {
  status: PlanStatus
  type: PlanType
  drugName: String
  strength: String
  timesPerMonth: Int
  addonName: String
  startDate: DateTime
  expireDate: DateTime
  totalRefills: Int
  refillsRemaining: Int
  nextDelivery: DateTime
  shippingInterval: Int
  amountDue: Int
}

input PlanUpdateManyMutationInput {
  status: PlanStatus
  type: PlanType
  drugName: String
  strength: String
  timesPerMonth: Int
  addonName: String
  startDate: DateTime
  expireDate: DateTime
  totalRefills: Int
  refillsRemaining: Int
  nextDelivery: DateTime
  shippingInterval: Int
  amountDue: Int
}

input PlanUpdateManyWithoutUserInput {
  create: [PlanCreateWithoutUserInput!]
  delete: [PlanWhereUniqueInput!]
  connect: [PlanWhereUniqueInput!]
  set: [PlanWhereUniqueInput!]
  disconnect: [PlanWhereUniqueInput!]
  update: [PlanUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PlanUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PlanScalarWhereInput!]
  updateMany: [PlanUpdateManyWithWhereNestedInput!]
}

input PlanUpdateManyWithWhereNestedInput {
  where: PlanScalarWhereInput!
  data: PlanUpdateManyDataInput!
}

input PlanUpdateWithoutUserDataInput {
  status: PlanStatus
  visit: VisitUpdateOneRequiredInput
  type: PlanType
  drugName: String
  strength: String
  timesPerMonth: Int
  addonName: String
  startDate: DateTime
  expireDate: DateTime
  totalRefills: Int
  refillsRemaining: Int
  nextDelivery: DateTime
  shippingInterval: Int
  amountDue: Int
}

input PlanUpdateWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput!
  data: PlanUpdateWithoutUserDataInput!
}

input PlanUpsertWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput!
  update: PlanUpdateWithoutUserDataInput!
  create: PlanCreateWithoutUserInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: PlanStatus
  status_not: PlanStatus
  status_in: [PlanStatus!]
  status_not_in: [PlanStatus!]
  user: UserWhereInput
  visit: VisitWhereInput
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  drugName: String
  drugName_not: String
  drugName_in: [String!]
  drugName_not_in: [String!]
  drugName_lt: String
  drugName_lte: String
  drugName_gt: String
  drugName_gte: String
  drugName_contains: String
  drugName_not_contains: String
  drugName_starts_with: String
  drugName_not_starts_with: String
  drugName_ends_with: String
  drugName_not_ends_with: String
  strength: String
  strength_not: String
  strength_in: [String!]
  strength_not_in: [String!]
  strength_lt: String
  strength_lte: String
  strength_gt: String
  strength_gte: String
  strength_contains: String
  strength_not_contains: String
  strength_starts_with: String
  strength_not_starts_with: String
  strength_ends_with: String
  strength_not_ends_with: String
  timesPerMonth: Int
  timesPerMonth_not: Int
  timesPerMonth_in: [Int!]
  timesPerMonth_not_in: [Int!]
  timesPerMonth_lt: Int
  timesPerMonth_lte: Int
  timesPerMonth_gt: Int
  timesPerMonth_gte: Int
  addonName: String
  addonName_not: String
  addonName_in: [String!]
  addonName_not_in: [String!]
  addonName_lt: String
  addonName_lte: String
  addonName_gt: String
  addonName_gte: String
  addonName_contains: String
  addonName_not_contains: String
  addonName_starts_with: String
  addonName_not_starts_with: String
  addonName_ends_with: String
  addonName_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  totalRefills: Int
  totalRefills_not: Int
  totalRefills_in: [Int!]
  totalRefills_not_in: [Int!]
  totalRefills_lt: Int
  totalRefills_lte: Int
  totalRefills_gt: Int
  totalRefills_gte: Int
  refillsRemaining: Int
  refillsRemaining_not: Int
  refillsRemaining_in: [Int!]
  refillsRemaining_not_in: [Int!]
  refillsRemaining_lt: Int
  refillsRemaining_lte: Int
  refillsRemaining_gt: Int
  refillsRemaining_gte: Int
  nextDelivery: DateTime
  nextDelivery_not: DateTime
  nextDelivery_in: [DateTime!]
  nextDelivery_not_in: [DateTime!]
  nextDelivery_lt: DateTime
  nextDelivery_lte: DateTime
  nextDelivery_gt: DateTime
  nextDelivery_gte: DateTime
  shippingInterval: Int
  shippingInterval_not: Int
  shippingInterval_in: [Int!]
  shippingInterval_not_in: [Int!]
  shippingInterval_lt: Int
  shippingInterval_lte: Int
  shippingInterval_gt: Int
  shippingInterval_gte: Int
  amountDue: Int
  amountDue_not: Int
  amountDue_in: [Int!]
  amountDue_not_in: [Int!]
  amountDue_lt: Int
  amountDue_lte: Int
  amountDue_gt: Int
  amountDue_gte: Int
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  creditCard(where: CreditCardWhereUniqueInput!): CreditCard
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard]!
  creditCardsConnection(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreditCardConnection!
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  visit(where: VisitWhereUniqueInput!): Visit
  visits(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visit]!
  visitsConnection(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VisitConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  PATIENT
  PHYSICIAN
  VISITOR
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  creditCard(where: CreditCardSubscriptionWhereInput): CreditCardSubscriptionPayload
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  visit(where: VisitSubscriptionWhereInput): VisitSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard!]
  photoId: String
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan!]
  visits(where: VisitWhereInput, orderBy: VisitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Visit!]
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  addresses: AddressCreateManyWithoutUserInput
  creditCards: CreditCardCreateManyWithoutUserInput
  photoId: String
  plans: PlanCreateManyWithoutUserInput
  visits: VisitCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserCreateOneWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVisitsInput {
  create: UserCreateWithoutVisitsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressesInput {
  id: ID
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  creditCards: CreditCardCreateManyWithoutUserInput
  photoId: String
  plans: PlanCreateManyWithoutUserInput
  visits: VisitCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserCreateWithoutCreditCardsInput {
  id: ID
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  addresses: AddressCreateManyWithoutUserInput
  photoId: String
  plans: PlanCreateManyWithoutUserInput
  visits: VisitCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserCreateWithoutPlansInput {
  id: ID
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  addresses: AddressCreateManyWithoutUserInput
  creditCards: CreditCardCreateManyWithoutUserInput
  photoId: String
  visits: VisitCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserCreateWithoutVisitsInput {
  id: ID
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  addresses: AddressCreateManyWithoutUserInput
  creditCards: CreditCardCreateManyWithoutUserInput
  photoId: String
  plans: PlanCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  photoId_ASC
  photoId_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  count_ASC
  count_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  photoId: String
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  addresses: AddressUpdateManyWithoutUserInput
  creditCards: CreditCardUpdateManyWithoutUserInput
  photoId: String
  plans: PlanUpdateManyWithoutUserInput
  visits: VisitUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateManyMutationInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  photoId: String
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateOneRequiredWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  update: UserUpdateWithoutCreditCardsDataInput
  upsert: UserUpsertWithoutCreditCardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  update: UserUpdateWithoutPlansDataInput
  upsert: UserUpsertWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutVisitsInput {
  create: UserCreateWithoutVisitsInput
  update: UserUpdateWithoutVisitsDataInput
  upsert: UserUpsertWithoutVisitsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAddressesDataInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  creditCards: CreditCardUpdateManyWithoutUserInput
  photoId: String
  plans: PlanUpdateManyWithoutUserInput
  visits: VisitUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateWithoutCreditCardsDataInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  addresses: AddressUpdateManyWithoutUserInput
  photoId: String
  plans: PlanUpdateManyWithoutUserInput
  visits: VisitUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateWithoutPlansDataInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  addresses: AddressUpdateManyWithoutUserInput
  creditCards: CreditCardUpdateManyWithoutUserInput
  photoId: String
  visits: VisitUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateWithoutVisitsDataInput {
  role: Role
  firstName: String
  lastName: String
  password: String
  email: String
  addresses: AddressUpdateManyWithoutUserInput
  creditCards: CreditCardUpdateManyWithoutUserInput
  photoId: String
  plans: PlanUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput!
  create: UserCreateWithoutAddressesInput!
}

input UserUpsertWithoutCreditCardsInput {
  update: UserUpdateWithoutCreditCardsDataInput!
  create: UserCreateWithoutCreditCardsInput!
}

input UserUpsertWithoutPlansInput {
  update: UserUpdateWithoutPlansDataInput!
  create: UserCreateWithoutPlansInput!
}

input UserUpsertWithoutVisitsInput {
  update: UserUpdateWithoutVisitsDataInput!
  create: UserCreateWithoutVisitsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  creditCards_every: CreditCardWhereInput
  creditCards_some: CreditCardWhereInput
  creditCards_none: CreditCardWhereInput
  photoId: String
  photoId_not: String
  photoId_in: [String!]
  photoId_not_in: [String!]
  photoId_lt: String
  photoId_lte: String
  photoId_gt: String
  photoId_gte: String
  photoId_contains: String
  photoId_not_contains: String
  photoId_starts_with: String
  photoId_not_starts_with: String
  photoId_ends_with: String
  photoId_not_ends_with: String
  plans_every: PlanWhereInput
  plans_some: PlanWhereInput
  plans_none: PlanWhereInput
  visits_every: VisitWhereInput
  visits_some: VisitWhereInput
  visits_none: VisitWhereInput
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Visit {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  type: PlanType!
  questionnaire: Json!
  status: VisitStatus!
}

type VisitConnection {
  pageInfo: PageInfo!
  edges: [VisitEdge]!
  aggregate: AggregateVisit!
}

input VisitCreateInput {
  id: ID
  user: UserCreateOneWithoutVisitsInput
  type: PlanType
  questionnaire: Json!
  status: VisitStatus
}

input VisitCreateManyWithoutUserInput {
  create: [VisitCreateWithoutUserInput!]
  connect: [VisitWhereUniqueInput!]
}

input VisitCreateOneInput {
  create: VisitCreateInput
  connect: VisitWhereUniqueInput
}

input VisitCreateWithoutUserInput {
  id: ID
  type: PlanType
  questionnaire: Json!
  status: VisitStatus
}

type VisitEdge {
  node: Visit!
  cursor: String!
}

enum VisitOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  questionnaire_ASC
  questionnaire_DESC
  status_ASC
  status_DESC
}

type VisitPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: PlanType!
  questionnaire: Json!
  status: VisitStatus!
}

input VisitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  status: VisitStatus
  status_not: VisitStatus
  status_in: [VisitStatus!]
  status_not_in: [VisitStatus!]
  AND: [VisitScalarWhereInput!]
  OR: [VisitScalarWhereInput!]
  NOT: [VisitScalarWhereInput!]
}

enum VisitStatus {
  PENDING
  APPROVED
  DENIED
  TEMPORARY
}

type VisitSubscriptionPayload {
  mutation: MutationType!
  node: Visit
  updatedFields: [String!]
  previousValues: VisitPreviousValues
}

input VisitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VisitWhereInput
  AND: [VisitSubscriptionWhereInput!]
  OR: [VisitSubscriptionWhereInput!]
  NOT: [VisitSubscriptionWhereInput!]
}

input VisitUpdateDataInput {
  user: UserUpdateOneWithoutVisitsInput
  type: PlanType
  questionnaire: Json
  status: VisitStatus
}

input VisitUpdateInput {
  user: UserUpdateOneWithoutVisitsInput
  type: PlanType
  questionnaire: Json
  status: VisitStatus
}

input VisitUpdateManyDataInput {
  type: PlanType
  questionnaire: Json
  status: VisitStatus
}

input VisitUpdateManyMutationInput {
  type: PlanType
  questionnaire: Json
  status: VisitStatus
}

input VisitUpdateManyWithoutUserInput {
  create: [VisitCreateWithoutUserInput!]
  delete: [VisitWhereUniqueInput!]
  connect: [VisitWhereUniqueInput!]
  set: [VisitWhereUniqueInput!]
  disconnect: [VisitWhereUniqueInput!]
  update: [VisitUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VisitUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [VisitScalarWhereInput!]
  updateMany: [VisitUpdateManyWithWhereNestedInput!]
}

input VisitUpdateManyWithWhereNestedInput {
  where: VisitScalarWhereInput!
  data: VisitUpdateManyDataInput!
}

input VisitUpdateOneRequiredInput {
  create: VisitCreateInput
  update: VisitUpdateDataInput
  upsert: VisitUpsertNestedInput
  connect: VisitWhereUniqueInput
}

input VisitUpdateWithoutUserDataInput {
  type: PlanType
  questionnaire: Json
  status: VisitStatus
}

input VisitUpdateWithWhereUniqueWithoutUserInput {
  where: VisitWhereUniqueInput!
  data: VisitUpdateWithoutUserDataInput!
}

input VisitUpsertNestedInput {
  update: VisitUpdateDataInput!
  create: VisitCreateInput!
}

input VisitUpsertWithWhereUniqueWithoutUserInput {
  where: VisitWhereUniqueInput!
  update: VisitUpdateWithoutUserDataInput!
  create: VisitCreateWithoutUserInput!
}

input VisitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  status: VisitStatus
  status_not: VisitStatus
  status_in: [VisitStatus!]
  status_not_in: [VisitStatus!]
  AND: [VisitWhereInput!]
  OR: [VisitWhereInput!]
  NOT: [VisitWhereInput!]
}

input VisitWhereUniqueInput {
  id: ID
}
`
      }
    