type AggregatePlan {
  count: Int!
}

type AggregateQuestionnaire {
  count: Int!
}

type AggregateShippingAddress {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createPlan(data: PlanCreateInput!): Plan!
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  createQuestionnaire(data: QuestionnaireCreateInput!): Questionnaire!
  updateQuestionnaire(data: QuestionnaireUpdateInput!, where: QuestionnaireWhereUniqueInput!): Questionnaire
  updateManyQuestionnaires(data: QuestionnaireUpdateManyMutationInput!, where: QuestionnaireWhereInput): BatchPayload!
  upsertQuestionnaire(where: QuestionnaireWhereUniqueInput!, create: QuestionnaireCreateInput!, update: QuestionnaireUpdateInput!): Questionnaire!
  deleteQuestionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  deleteManyQuestionnaires(where: QuestionnaireWhereInput): BatchPayload!
  createShippingAddress(data: ShippingAddressCreateInput!): ShippingAddress!
  updateShippingAddress(data: ShippingAddressUpdateInput!, where: ShippingAddressWhereUniqueInput!): ShippingAddress
  upsertShippingAddress(where: ShippingAddressWhereUniqueInput!, create: ShippingAddressCreateInput!, update: ShippingAddressUpdateInput!): ShippingAddress!
  deleteShippingAddress(where: ShippingAddressWhereUniqueInput!): ShippingAddress
  deleteManyShippingAddresses(where: ShippingAddressWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Plan {
  id: ID!
  user: User!
  type: PlanType!
  startDate: DateTime!
  expireDate: DateTime!
  nextDelivery: DateTime
  refillsRemaining: Int!
  totalRefills: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  ccToken: String!
  shippingAddress: ShippingAddress!
}

type PlanConnection {
  pageInfo: PageInfo!
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  id: ID
  user: UserCreateOneWithoutPlansInput!
  type: PlanType!
  startDate: DateTime!
  expireDate: DateTime!
  nextDelivery: DateTime
  refillsRemaining: Int!
  totalRefills: Int!
  ccToken: String!
  shippingAddress: ShippingAddressCreateOneInput!
}

input PlanCreateManyWithoutUserInput {
  create: [PlanCreateWithoutUserInput!]
  connect: [PlanWhereUniqueInput!]
}

input PlanCreateWithoutUserInput {
  id: ID
  type: PlanType!
  startDate: DateTime!
  expireDate: DateTime!
  nextDelivery: DateTime
  refillsRemaining: Int!
  totalRefills: Int!
  ccToken: String!
  shippingAddress: ShippingAddressCreateOneInput!
}

type PlanEdge {
  node: Plan!
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  startDate_ASC
  startDate_DESC
  expireDate_ASC
  expireDate_DESC
  nextDelivery_ASC
  nextDelivery_DESC
  refillsRemaining_ASC
  refillsRemaining_DESC
  totalRefills_ASC
  totalRefills_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  ccToken_ASC
  ccToken_DESC
}

type PlanPreviousValues {
  id: ID!
  type: PlanType!
  startDate: DateTime!
  expireDate: DateTime!
  nextDelivery: DateTime
  refillsRemaining: Int!
  totalRefills: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
  ccToken: String!
}

input PlanScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  nextDelivery: DateTime
  nextDelivery_not: DateTime
  nextDelivery_in: [DateTime!]
  nextDelivery_not_in: [DateTime!]
  nextDelivery_lt: DateTime
  nextDelivery_lte: DateTime
  nextDelivery_gt: DateTime
  nextDelivery_gte: DateTime
  refillsRemaining: Int
  refillsRemaining_not: Int
  refillsRemaining_in: [Int!]
  refillsRemaining_not_in: [Int!]
  refillsRemaining_lt: Int
  refillsRemaining_lte: Int
  refillsRemaining_gt: Int
  refillsRemaining_gte: Int
  totalRefills: Int
  totalRefills_not: Int
  totalRefills_in: [Int!]
  totalRefills_not_in: [Int!]
  totalRefills_lt: Int
  totalRefills_lte: Int
  totalRefills_gt: Int
  totalRefills_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  ccToken: String
  ccToken_not: String
  ccToken_in: [String!]
  ccToken_not_in: [String!]
  ccToken_lt: String
  ccToken_lte: String
  ccToken_gt: String
  ccToken_gte: String
  ccToken_contains: String
  ccToken_not_contains: String
  ccToken_starts_with: String
  ccToken_not_starts_with: String
  ccToken_ends_with: String
  ccToken_not_ends_with: String
  AND: [PlanScalarWhereInput!]
  OR: [PlanScalarWhereInput!]
  NOT: [PlanScalarWhereInput!]
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
  AND: [PlanSubscriptionWhereInput!]
  OR: [PlanSubscriptionWhereInput!]
  NOT: [PlanSubscriptionWhereInput!]
}

enum PlanType {
  ED
  HAIR
  SLEEP
}

input PlanUpdateInput {
  user: UserUpdateOneRequiredWithoutPlansInput
  type: PlanType
  startDate: DateTime
  expireDate: DateTime
  nextDelivery: DateTime
  refillsRemaining: Int
  totalRefills: Int
  ccToken: String
  shippingAddress: ShippingAddressUpdateOneRequiredInput
}

input PlanUpdateManyDataInput {
  type: PlanType
  startDate: DateTime
  expireDate: DateTime
  nextDelivery: DateTime
  refillsRemaining: Int
  totalRefills: Int
  ccToken: String
}

input PlanUpdateManyMutationInput {
  type: PlanType
  startDate: DateTime
  expireDate: DateTime
  nextDelivery: DateTime
  refillsRemaining: Int
  totalRefills: Int
  ccToken: String
}

input PlanUpdateManyWithoutUserInput {
  create: [PlanCreateWithoutUserInput!]
  delete: [PlanWhereUniqueInput!]
  connect: [PlanWhereUniqueInput!]
  set: [PlanWhereUniqueInput!]
  disconnect: [PlanWhereUniqueInput!]
  update: [PlanUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PlanUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PlanScalarWhereInput!]
  updateMany: [PlanUpdateManyWithWhereNestedInput!]
}

input PlanUpdateManyWithWhereNestedInput {
  where: PlanScalarWhereInput!
  data: PlanUpdateManyDataInput!
}

input PlanUpdateWithoutUserDataInput {
  type: PlanType
  startDate: DateTime
  expireDate: DateTime
  nextDelivery: DateTime
  refillsRemaining: Int
  totalRefills: Int
  ccToken: String
  shippingAddress: ShippingAddressUpdateOneRequiredInput
}

input PlanUpdateWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput!
  data: PlanUpdateWithoutUserDataInput!
}

input PlanUpsertWithWhereUniqueWithoutUserInput {
  where: PlanWhereUniqueInput!
  update: PlanUpdateWithoutUserDataInput!
  create: PlanCreateWithoutUserInput!
}

input PlanWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  type: PlanType
  type_not: PlanType
  type_in: [PlanType!]
  type_not_in: [PlanType!]
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  expireDate: DateTime
  expireDate_not: DateTime
  expireDate_in: [DateTime!]
  expireDate_not_in: [DateTime!]
  expireDate_lt: DateTime
  expireDate_lte: DateTime
  expireDate_gt: DateTime
  expireDate_gte: DateTime
  nextDelivery: DateTime
  nextDelivery_not: DateTime
  nextDelivery_in: [DateTime!]
  nextDelivery_not_in: [DateTime!]
  nextDelivery_lt: DateTime
  nextDelivery_lte: DateTime
  nextDelivery_gt: DateTime
  nextDelivery_gte: DateTime
  refillsRemaining: Int
  refillsRemaining_not: Int
  refillsRemaining_in: [Int!]
  refillsRemaining_not_in: [Int!]
  refillsRemaining_lt: Int
  refillsRemaining_lte: Int
  refillsRemaining_gt: Int
  refillsRemaining_gte: Int
  totalRefills: Int
  totalRefills_not: Int
  totalRefills_in: [Int!]
  totalRefills_not_in: [Int!]
  totalRefills_lt: Int
  totalRefills_lte: Int
  totalRefills_gt: Int
  totalRefills_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  ccToken: String
  ccToken_not: String
  ccToken_in: [String!]
  ccToken_not_in: [String!]
  ccToken_lt: String
  ccToken_lte: String
  ccToken_gt: String
  ccToken_gte: String
  ccToken_contains: String
  ccToken_not_contains: String
  ccToken_starts_with: String
  ccToken_not_starts_with: String
  ccToken_ends_with: String
  ccToken_not_ends_with: String
  shippingAddress: ShippingAddressWhereInput
  AND: [PlanWhereInput!]
  OR: [PlanWhereInput!]
  NOT: [PlanWhereInput!]
}

input PlanWhereUniqueInput {
  id: ID
}

type Query {
  plan(where: PlanWhereUniqueInput!): Plan
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  questionnaire(where: QuestionnaireWhereUniqueInput!): Questionnaire
  questionnaires(where: QuestionnaireWhereInput, orderBy: QuestionnaireOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Questionnaire]!
  questionnairesConnection(where: QuestionnaireWhereInput, orderBy: QuestionnaireOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionnaireConnection!
  shippingAddress(where: ShippingAddressWhereUniqueInput!): ShippingAddress
  shippingAddresses(where: ShippingAddressWhereInput, orderBy: ShippingAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShippingAddress]!
  shippingAddressesConnection(where: ShippingAddressWhereInput, orderBy: ShippingAddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShippingAddressConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Questionnaire {
  id: ID!
  user: User!
  details: Json!
}

type QuestionnaireConnection {
  pageInfo: PageInfo!
  edges: [QuestionnaireEdge]!
  aggregate: AggregateQuestionnaire!
}

input QuestionnaireCreateInput {
  id: ID
  user: UserCreateOneInput!
  details: Json!
}

type QuestionnaireEdge {
  node: Questionnaire!
  cursor: String!
}

enum QuestionnaireOrderByInput {
  id_ASC
  id_DESC
  details_ASC
  details_DESC
}

type QuestionnairePreviousValues {
  id: ID!
  details: Json!
}

type QuestionnaireSubscriptionPayload {
  mutation: MutationType!
  node: Questionnaire
  updatedFields: [String!]
  previousValues: QuestionnairePreviousValues
}

input QuestionnaireSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionnaireWhereInput
  AND: [QuestionnaireSubscriptionWhereInput!]
  OR: [QuestionnaireSubscriptionWhereInput!]
  NOT: [QuestionnaireSubscriptionWhereInput!]
}

input QuestionnaireUpdateInput {
  user: UserUpdateOneRequiredInput
  details: Json
}

input QuestionnaireUpdateManyMutationInput {
  details: Json
}

input QuestionnaireWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  AND: [QuestionnaireWhereInput!]
  OR: [QuestionnaireWhereInput!]
  NOT: [QuestionnaireWhereInput!]
}

input QuestionnaireWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  PATIENT
  PHYSICIAN
  VISITOR
}

type ShippingAddress {
  id: ID!
  user: User!
}

type ShippingAddressConnection {
  pageInfo: PageInfo!
  edges: [ShippingAddressEdge]!
  aggregate: AggregateShippingAddress!
}

input ShippingAddressCreateInput {
  id: ID
  user: UserCreateOneInput!
}

input ShippingAddressCreateOneInput {
  create: ShippingAddressCreateInput
  connect: ShippingAddressWhereUniqueInput
}

type ShippingAddressEdge {
  node: ShippingAddress!
  cursor: String!
}

enum ShippingAddressOrderByInput {
  id_ASC
  id_DESC
}

type ShippingAddressPreviousValues {
  id: ID!
}

type ShippingAddressSubscriptionPayload {
  mutation: MutationType!
  node: ShippingAddress
  updatedFields: [String!]
  previousValues: ShippingAddressPreviousValues
}

input ShippingAddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShippingAddressWhereInput
  AND: [ShippingAddressSubscriptionWhereInput!]
  OR: [ShippingAddressSubscriptionWhereInput!]
  NOT: [ShippingAddressSubscriptionWhereInput!]
}

input ShippingAddressUpdateDataInput {
  user: UserUpdateOneRequiredInput
}

input ShippingAddressUpdateInput {
  user: UserUpdateOneRequiredInput
}

input ShippingAddressUpdateOneRequiredInput {
  create: ShippingAddressCreateInput
  update: ShippingAddressUpdateDataInput
  upsert: ShippingAddressUpsertNestedInput
  connect: ShippingAddressWhereUniqueInput
}

input ShippingAddressUpsertNestedInput {
  update: ShippingAddressUpdateDataInput!
  create: ShippingAddressCreateInput!
}

input ShippingAddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  AND: [ShippingAddressWhereInput!]
  OR: [ShippingAddressWhereInput!]
  NOT: [ShippingAddressWhereInput!]
}

input ShippingAddressWhereUniqueInput {
  id: ID
}

type Subscription {
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  questionnaire(where: QuestionnaireSubscriptionWhereInput): QuestionnaireSubscriptionPayload
  shippingAddress(where: ShippingAddressSubscriptionWhereInput): ShippingAddressSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
  plans: PlanCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlansInput {
  id: ID
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  count_ASC
  count_DESC
}

type UserPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
  password: String!
  email: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  password: String
  email: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
  plans: PlanUpdateManyWithoutUserInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  email: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
  plans: PlanUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  password: String
  email: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPlansInput {
  create: UserCreateWithoutPlansInput
  update: UserUpdateWithoutPlansDataInput
  upsert: UserUpsertWithoutPlansInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPlansDataInput {
  firstName: String
  lastName: String
  password: String
  email: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  count: Int
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPlansInput {
  update: UserUpdateWithoutPlansDataInput!
  create: UserCreateWithoutPlansInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  plans_every: PlanWhereInput
  plans_some: PlanWhereInput
  plans_none: PlanWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
